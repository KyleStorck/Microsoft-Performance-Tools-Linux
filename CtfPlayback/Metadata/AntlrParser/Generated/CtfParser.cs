// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Ctf.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class CtfParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		ALIGN=18, CALLSITE=19, CLOCK=20, ENUM=21, ENV=22, EVENT=23, FLOATING_POINT=24, 
		INTEGER=25, STREAM=26, STRING=27, STRUCT=28, TRACE=29, TYPEALIAS=30, TYPEDEF=31, 
		VARIANT=32, DECIMAL_LITERAL=33, OCTAL_LITERAL=34, HEXADECIMAL_LITERAL=35, 
		IDENTIFIER=36, COMMENT=37, WS=38, LINE_COMMENT=39, STRING_LITERAL=40, 
		CHARACTER_LITERAL=41, GARBAGE=42;
	public const int
		RULE_file = 0, RULE_keywords = 1, RULE_declaration = 2, RULE_declared_type = 3, 
		RULE_typealias_declaration = 4, RULE_typedef_declaration = 5, RULE_declaration_specifiers = 6, 
		RULE_type_specifier = 7, RULE_event_declaration = 8, RULE_stream_declaration = 9, 
		RULE_env_declaration = 10, RULE_trace_declaration = 11, RULE_clock_declaration = 12, 
		RULE_callsite_declaration = 13, RULE_type_declarator_list = 14, RULE_abstract_declarator_list = 15, 
		RULE_alias_declaration_specifiers = 16, RULE_alias_abstract_declarator_list = 17, 
		RULE_dynamic_scope_type_assignment = 18, RULE_trace_assignment_expression_list = 19, 
		RULE_stream_assignment_expression_list = 20, RULE_ctf_expression = 21, 
		RULE_ctf_expression_list = 22, RULE_enum_type_specifier = 23, RULE_variant_type_specifier = 24, 
		RULE_struct_type_specifier = 25, RULE_event_declaration_begin = 26, RULE_event_declaration_end = 27, 
		RULE_stream_declaration_begin = 28, RULE_stream_declaration_end = 29, 
		RULE_env_declaration_begin = 30, RULE_env_declaration_end = 31, RULE_trace_declaration_begin = 32, 
		RULE_trace_declaration_end = 33, RULE_clock_declaration_begin = 34, RULE_clock_declaration_end = 35, 
		RULE_callsite_declaration_begin = 36, RULE_callsite_declaration_end = 37, 
		RULE_type_declarator = 38, RULE_abstract_declarator = 39, RULE_alias_abstract_declarator = 40, 
		RULE_ctf_assignment_expression = 41, RULE_enumerator_list = 42, RULE_enum_integer_declaration_specifiers = 43, 
		RULE_variant_declaration_begin = 44, RULE_variant_declaration_end = 45, 
		RULE_struct_or_variant_declaration_list = 46, RULE_struct_declaration_begin = 47, 
		RULE_struct_declaration_end = 48, RULE_unary_expression = 49, RULE_enumerator = 50, 
		RULE_enum_integer_type_specifier = 51, RULE_struct_or_variant_declaration = 52, 
		RULE_integerLiteral = 53, RULE_postfix_expression = 54, RULE_postfix_expression_complex = 55, 
		RULE_dynamic_reference = 56, RULE_enumerator_mapping = 57, RULE_struct_or_variant_declarator_list = 58, 
		RULE_struct_or_variant_declarator = 59, RULE_declarator = 60;
	public static readonly string[] ruleNames = {
		"file", "keywords", "declaration", "declared_type", "typealias_declaration", 
		"typedef_declaration", "declaration_specifiers", "type_specifier", "event_declaration", 
		"stream_declaration", "env_declaration", "trace_declaration", "clock_declaration", 
		"callsite_declaration", "type_declarator_list", "abstract_declarator_list", 
		"alias_declaration_specifiers", "alias_abstract_declarator_list", "dynamic_scope_type_assignment", 
		"trace_assignment_expression_list", "stream_assignment_expression_list", 
		"ctf_expression", "ctf_expression_list", "enum_type_specifier", "variant_type_specifier", 
		"struct_type_specifier", "event_declaration_begin", "event_declaration_end", 
		"stream_declaration_begin", "stream_declaration_end", "env_declaration_begin", 
		"env_declaration_end", "trace_declaration_begin", "trace_declaration_end", 
		"clock_declaration_begin", "clock_declaration_end", "callsite_declaration_begin", 
		"callsite_declaration_end", "type_declarator", "abstract_declarator", 
		"alias_abstract_declarator", "ctf_assignment_expression", "enumerator_list", 
		"enum_integer_declaration_specifiers", "variant_declaration_begin", "variant_declaration_end", 
		"struct_or_variant_declaration_list", "struct_declaration_begin", "struct_declaration_end", 
		"unary_expression", "enumerator", "enum_integer_type_specifier", "struct_or_variant_declaration", 
		"integerLiteral", "postfix_expression", "postfix_expression_complex", 
		"dynamic_reference", "enumerator_mapping", "struct_or_variant_declarator_list", 
		"struct_or_variant_declarator", "declarator"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "':='", "'{'", "'}'", "','", "'.'", "':'", "'<'", "'>'", 
		"'('", "')'", "'['", "']'", "'='", "'+'", "'-'", "'...'", "'align'", "'callsite'", 
		"'clock'", "'enum'", "'env'", "'event'", "'floating_point'", "'integer'", 
		"'stream'", "'string'", "'struct'", "'trace'", "'typealias'", "'typedef'", 
		"'variant'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "ALIGN", "CALLSITE", "CLOCK", "ENUM", 
		"ENV", "EVENT", "FLOATING_POINT", "INTEGER", "STREAM", "STRING", "STRUCT", 
		"TRACE", "TYPEALIAS", "TYPEDEF", "VARIANT", "DECIMAL_LITERAL", "OCTAL_LITERAL", 
		"HEXADECIMAL_LITERAL", "IDENTIFIER", "COMMENT", "WS", "LINE_COMMENT", 
		"STRING_LITERAL", "CHARACTER_LITERAL", "GARBAGE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ctf.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CtfParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CtfParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CtfParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 122; declaration();
				}
				}
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CALLSITE) | (1L << CLOCK) | (1L << ENUM) | (1L << ENV) | (1L << EVENT) | (1L << FLOATING_POINT) | (1L << INTEGER) | (1L << STREAM) | (1L << STRING) | (1L << STRUCT) | (1L << TRACE) | (1L << TYPEALIAS) | (1L << TYPEDEF) | (1L << VARIANT) | (1L << IDENTIFIER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordsContext : ParserRuleContext {
		public ITerminalNode FLOATING_POINT() { return GetToken(CtfParser.FLOATING_POINT, 0); }
		public ITerminalNode INTEGER() { return GetToken(CtfParser.INTEGER, 0); }
		public ITerminalNode STRING() { return GetToken(CtfParser.STRING, 0); }
		public ITerminalNode ENUM() { return GetToken(CtfParser.ENUM, 0); }
		public ITerminalNode VARIANT() { return GetToken(CtfParser.VARIANT, 0); }
		public ITerminalNode STRUCT() { return GetToken(CtfParser.STRUCT, 0); }
		public ITerminalNode TYPEDEF() { return GetToken(CtfParser.TYPEDEF, 0); }
		public ITerminalNode EVENT() { return GetToken(CtfParser.EVENT, 0); }
		public ITerminalNode STREAM() { return GetToken(CtfParser.STREAM, 0); }
		public ITerminalNode ENV() { return GetToken(CtfParser.ENV, 0); }
		public ITerminalNode TRACE() { return GetToken(CtfParser.TRACE, 0); }
		public ITerminalNode CLOCK() { return GetToken(CtfParser.CLOCK, 0); }
		public ITerminalNode CALLSITE() { return GetToken(CtfParser.CALLSITE, 0); }
		public ITerminalNode ALIGN() { return GetToken(CtfParser.ALIGN, 0); }
		public KeywordsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywords; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterKeywords(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitKeywords(this);
		}
	}

	[RuleVersion(0)]
	public KeywordsContext keywords() {
		KeywordsContext _localctx = new KeywordsContext(Context, State);
		EnterRule(_localctx, 2, RULE_keywords);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLSITE) | (1L << CLOCK) | (1L << ENUM) | (1L << ENV) | (1L << EVENT) | (1L << FLOATING_POINT) | (1L << INTEGER) | (1L << STREAM) | (1L << STRING) | (1L << STRUCT) | (1L << TRACE) | (1L << TYPEDEF) | (1L << VARIANT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public Declaration_specifiersContext declaration_specifiers() {
			return GetRuleContext<Declaration_specifiersContext>(0);
		}
		public Event_declarationContext event_declaration() {
			return GetRuleContext<Event_declarationContext>(0);
		}
		public Stream_declarationContext stream_declaration() {
			return GetRuleContext<Stream_declarationContext>(0);
		}
		public Env_declarationContext env_declaration() {
			return GetRuleContext<Env_declarationContext>(0);
		}
		public Trace_declarationContext trace_declaration() {
			return GetRuleContext<Trace_declarationContext>(0);
		}
		public Clock_declarationContext clock_declaration() {
			return GetRuleContext<Clock_declarationContext>(0);
		}
		public Callsite_declarationContext callsite_declaration() {
			return GetRuleContext<Callsite_declarationContext>(0);
		}
		public Typedef_declarationContext typedef_declaration() {
			return GetRuleContext<Typedef_declarationContext>(0);
		}
		public Typealias_declarationContext typealias_declaration() {
			return GetRuleContext<Typealias_declarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_declaration);
		try {
			State = 144;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENUM:
			case FLOATING_POINT:
			case INTEGER:
			case STRING:
			case STRUCT:
			case VARIANT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 129; declaration_specifiers();
				State = 130; Match(T__0);
				}
				break;
			case EVENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132; event_declaration();
				}
				break;
			case STREAM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 133; stream_declaration();
				}
				break;
			case ENV:
				EnterOuterAlt(_localctx, 4);
				{
				State = 134; env_declaration();
				}
				break;
			case TRACE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 135; trace_declaration();
				}
				break;
			case CLOCK:
				EnterOuterAlt(_localctx, 6);
				{
				State = 136; clock_declaration();
				}
				break;
			case CALLSITE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 137; callsite_declaration();
				}
				break;
			case TYPEDEF:
				EnterOuterAlt(_localctx, 8);
				{
				State = 138; typedef_declaration();
				State = 139; Match(T__0);
				}
				break;
			case TYPEALIAS:
				EnterOuterAlt(_localctx, 9);
				{
				State = 141; typealias_declaration();
				State = 142; Match(T__0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declared_typeContext : ParserRuleContext {
		public Alias_declaration_specifiersContext alias_declaration_specifiers() {
			return GetRuleContext<Alias_declaration_specifiersContext>(0);
		}
		public Alias_abstract_declarator_listContext alias_abstract_declarator_list() {
			return GetRuleContext<Alias_abstract_declarator_listContext>(0);
		}
		public Declared_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declared_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterDeclared_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitDeclared_type(this);
		}
	}

	[RuleVersion(0)]
	public Declared_typeContext declared_type() {
		Declared_typeContext _localctx = new Declared_typeContext(Context, State);
		EnterRule(_localctx, 6, RULE_declared_type);
		try {
			State = 148;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENUM:
			case FLOATING_POINT:
			case INTEGER:
			case STRING:
			case STRUCT:
			case VARIANT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 146; alias_declaration_specifiers();
				}
				break;
			case T__0:
			case T__4:
			case T__9:
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 147; alias_abstract_declarator_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typealias_declarationContext : ParserRuleContext {
		public ITerminalNode TYPEALIAS() { return GetToken(CtfParser.TYPEALIAS, 0); }
		public Declaration_specifiersContext declaration_specifiers() {
			return GetRuleContext<Declaration_specifiersContext>(0);
		}
		public Abstract_declarator_listContext abstract_declarator_list() {
			return GetRuleContext<Abstract_declarator_listContext>(0);
		}
		public Declared_typeContext declared_type() {
			return GetRuleContext<Declared_typeContext>(0);
		}
		public Typealias_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typealias_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTypealias_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTypealias_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Typealias_declarationContext typealias_declaration() {
		Typealias_declarationContext _localctx = new Typealias_declarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_typealias_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; Match(TYPEALIAS);
			State = 151; declaration_specifiers();
			State = 152; abstract_declarator_list();
			State = 153; Match(T__1);
			State = 154; declared_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typedef_declarationContext : ParserRuleContext {
		public Typedef_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedef_declaration; } }
	 
		public Typedef_declarationContext() { }
		public virtual void CopyFrom(Typedef_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeDefDeclarationContext : Typedef_declarationContext {
		public ITerminalNode TYPEDEF() { return GetToken(CtfParser.TYPEDEF, 0); }
		public Declaration_specifiersContext declaration_specifiers() {
			return GetRuleContext<Declaration_specifiersContext>(0);
		}
		public Type_declarator_listContext type_declarator_list() {
			return GetRuleContext<Type_declarator_listContext>(0);
		}
		public TypeDefDeclarationContext(Typedef_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTypeDefDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTypeDefDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public Typedef_declarationContext typedef_declaration() {
		Typedef_declarationContext _localctx = new Typedef_declarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_typedef_declaration);
		try {
			_localctx = new TypeDefDeclarationContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; Match(TYPEDEF);
			State = 157; declaration_specifiers();
			State = 158; type_declarator_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration_specifiersContext : ParserRuleContext {
		public Declaration_specifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration_specifiers; } }
	 
		public Declaration_specifiersContext() { }
		public virtual void CopyFrom(Declaration_specifiersContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclarationSpecifierTypeSpecifierContext : Declaration_specifiersContext {
		public Type_specifierContext type_specifier() {
			return GetRuleContext<Type_specifierContext>(0);
		}
		public DeclarationSpecifierTypeSpecifierContext(Declaration_specifiersContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterDeclarationSpecifierTypeSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitDeclarationSpecifierTypeSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public Declaration_specifiersContext declaration_specifiers() {
		Declaration_specifiersContext _localctx = new Declaration_specifiersContext(Context, State);
		EnterRule(_localctx, 12, RULE_declaration_specifiers);
		try {
			_localctx = new DeclarationSpecifierTypeSpecifierContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; type_specifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_specifierContext : ParserRuleContext {
		public Type_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_specifier; } }
	 
		public Type_specifierContext() { }
		public virtual void CopyFrom(Type_specifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeSpecifierIntegerContext : Type_specifierContext {
		public ITerminalNode INTEGER() { return GetToken(CtfParser.INTEGER, 0); }
		public Ctf_expression_listContext ctf_expression_list() {
			return GetRuleContext<Ctf_expression_listContext>(0);
		}
		public TypeSpecifierIntegerContext(Type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTypeSpecifierInteger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTypeSpecifierInteger(this);
		}
	}
	public partial class TypeSpecifierStringContext : Type_specifierContext {
		public ITerminalNode STRING() { return GetToken(CtfParser.STRING, 0); }
		public Ctf_expression_listContext ctf_expression_list() {
			return GetRuleContext<Ctf_expression_listContext>(0);
		}
		public TypeSpecifierStringContext(Type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTypeSpecifierString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTypeSpecifierString(this);
		}
	}
	public partial class TypeSpecifierFloatingPointContext : Type_specifierContext {
		public ITerminalNode FLOATING_POINT() { return GetToken(CtfParser.FLOATING_POINT, 0); }
		public TypeSpecifierFloatingPointContext(Type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTypeSpecifierFloatingPoint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTypeSpecifierFloatingPoint(this);
		}
	}
	public partial class TypeSpecifierSimpleStringContext : Type_specifierContext {
		public ITerminalNode STRING() { return GetToken(CtfParser.STRING, 0); }
		public TypeSpecifierSimpleStringContext(Type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTypeSpecifierSimpleString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTypeSpecifierSimpleString(this);
		}
	}
	public partial class TypeSpecifierVariantContext : Type_specifierContext {
		public ITerminalNode VARIANT() { return GetToken(CtfParser.VARIANT, 0); }
		public Variant_type_specifierContext variant_type_specifier() {
			return GetRuleContext<Variant_type_specifierContext>(0);
		}
		public TypeSpecifierVariantContext(Type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTypeSpecifierVariant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTypeSpecifierVariant(this);
		}
	}
	public partial class TypeSpecifierStructContext : Type_specifierContext {
		public ITerminalNode STRUCT() { return GetToken(CtfParser.STRUCT, 0); }
		public Struct_type_specifierContext struct_type_specifier() {
			return GetRuleContext<Struct_type_specifierContext>(0);
		}
		public TypeSpecifierStructContext(Type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTypeSpecifierStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTypeSpecifierStruct(this);
		}
	}
	public partial class TypeSpecifierFloatingPointWithFieldsContext : Type_specifierContext {
		public ITerminalNode FLOATING_POINT() { return GetToken(CtfParser.FLOATING_POINT, 0); }
		public Ctf_expression_listContext ctf_expression_list() {
			return GetRuleContext<Ctf_expression_listContext>(0);
		}
		public TypeSpecifierFloatingPointWithFieldsContext(Type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTypeSpecifierFloatingPointWithFields(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTypeSpecifierFloatingPointWithFields(this);
		}
	}
	public partial class TypeSpecifierIdentifierContext : Type_specifierContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CtfParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CtfParser.IDENTIFIER, i);
		}
		public TypeSpecifierIdentifierContext(Type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTypeSpecifierIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTypeSpecifierIdentifier(this);
		}
	}
	public partial class TypeSpecifierEmptyIntegerContext : Type_specifierContext {
		public ITerminalNode INTEGER() { return GetToken(CtfParser.INTEGER, 0); }
		public TypeSpecifierEmptyIntegerContext(Type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTypeSpecifierEmptyInteger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTypeSpecifierEmptyInteger(this);
		}
	}
	public partial class TypeSpecifierEmptyStringContext : Type_specifierContext {
		public ITerminalNode STRING() { return GetToken(CtfParser.STRING, 0); }
		public TypeSpecifierEmptyStringContext(Type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTypeSpecifierEmptyString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTypeSpecifierEmptyString(this);
		}
	}
	public partial class TypeSpecifierEnumContext : Type_specifierContext {
		public ITerminalNode ENUM() { return GetToken(CtfParser.ENUM, 0); }
		public Enum_type_specifierContext enum_type_specifier() {
			return GetRuleContext<Enum_type_specifierContext>(0);
		}
		public TypeSpecifierEnumContext(Type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTypeSpecifierEnum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTypeSpecifierEnum(this);
		}
	}

	[RuleVersion(0)]
	public Type_specifierContext type_specifier() {
		Type_specifierContext _localctx = new Type_specifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_type_specifier);
		try {
			int _alt;
			State = 198;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new TypeSpecifierFloatingPointContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 162; Match(FLOATING_POINT);
				State = 163; Match(T__2);
				State = 164; Match(T__3);
				}
				break;
			case 2:
				_localctx = new TypeSpecifierFloatingPointWithFieldsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 165; Match(FLOATING_POINT);
				State = 166; Match(T__2);
				State = 167; ctf_expression_list();
				State = 168; Match(T__3);
				}
				break;
			case 3:
				_localctx = new TypeSpecifierEmptyIntegerContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 170; Match(INTEGER);
				State = 171; Match(T__2);
				State = 172; Match(T__3);
				}
				break;
			case 4:
				_localctx = new TypeSpecifierIntegerContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 173; Match(INTEGER);
				State = 174; Match(T__2);
				State = 175; ctf_expression_list();
				State = 176; Match(T__3);
				}
				break;
			case 5:
				_localctx = new TypeSpecifierSimpleStringContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 178; Match(STRING);
				}
				break;
			case 6:
				_localctx = new TypeSpecifierEmptyStringContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 179; Match(STRING);
				State = 180; Match(T__2);
				State = 181; Match(T__3);
				}
				break;
			case 7:
				_localctx = new TypeSpecifierStringContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 182; Match(STRING);
				State = 183; Match(T__2);
				State = 184; ctf_expression_list();
				State = 185; Match(T__3);
				}
				break;
			case 8:
				_localctx = new TypeSpecifierEnumContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 187; Match(ENUM);
				State = 188; enum_type_specifier();
				}
				break;
			case 9:
				_localctx = new TypeSpecifierVariantContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 189; Match(VARIANT);
				State = 190; variant_type_specifier();
				}
				break;
			case 10:
				_localctx = new TypeSpecifierStructContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 191; Match(STRUCT);
				State = 192; struct_type_specifier();
				}
				break;
			case 11:
				_localctx = new TypeSpecifierIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 194;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 193; Match(IDENTIFIER);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 196;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_declarationContext : ParserRuleContext {
		public Event_declaration_beginContext event_declaration_begin() {
			return GetRuleContext<Event_declaration_beginContext>(0);
		}
		public Event_declaration_endContext event_declaration_end() {
			return GetRuleContext<Event_declaration_endContext>(0);
		}
		public Ctf_expression_listContext ctf_expression_list() {
			return GetRuleContext<Ctf_expression_listContext>(0);
		}
		public Event_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEvent_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEvent_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Event_declarationContext event_declaration() {
		Event_declarationContext _localctx = new Event_declarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_event_declaration);
		try {
			State = 207;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 200; event_declaration_begin();
				State = 201; event_declaration_end();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203; event_declaration_begin();
				State = 204; ctf_expression_list();
				State = 205; event_declaration_end();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stream_declarationContext : ParserRuleContext {
		public Stream_declaration_beginContext stream_declaration_begin() {
			return GetRuleContext<Stream_declaration_beginContext>(0);
		}
		public Stream_declaration_endContext stream_declaration_end() {
			return GetRuleContext<Stream_declaration_endContext>(0);
		}
		public Stream_assignment_expression_listContext stream_assignment_expression_list() {
			return GetRuleContext<Stream_assignment_expression_listContext>(0);
		}
		public Stream_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stream_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStream_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStream_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Stream_declarationContext stream_declaration() {
		Stream_declarationContext _localctx = new Stream_declarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_stream_declaration);
		try {
			State = 216;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 209; stream_declaration_begin();
				State = 210; stream_declaration_end();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 212; stream_declaration_begin();
				State = 213; stream_assignment_expression_list();
				State = 214; stream_declaration_end();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Env_declarationContext : ParserRuleContext {
		public Env_declaration_beginContext env_declaration_begin() {
			return GetRuleContext<Env_declaration_beginContext>(0);
		}
		public Env_declaration_endContext env_declaration_end() {
			return GetRuleContext<Env_declaration_endContext>(0);
		}
		public Ctf_expression_listContext ctf_expression_list() {
			return GetRuleContext<Ctf_expression_listContext>(0);
		}
		public Env_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_env_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnv_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnv_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Env_declarationContext env_declaration() {
		Env_declarationContext _localctx = new Env_declarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_env_declaration);
		try {
			State = 225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 218; env_declaration_begin();
				State = 219; env_declaration_end();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 221; env_declaration_begin();
				State = 222; ctf_expression_list();
				State = 223; env_declaration_end();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trace_declarationContext : ParserRuleContext {
		public Trace_declaration_beginContext trace_declaration_begin() {
			return GetRuleContext<Trace_declaration_beginContext>(0);
		}
		public Trace_declaration_endContext trace_declaration_end() {
			return GetRuleContext<Trace_declaration_endContext>(0);
		}
		public Trace_assignment_expression_listContext trace_assignment_expression_list() {
			return GetRuleContext<Trace_assignment_expression_listContext>(0);
		}
		public Trace_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trace_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTrace_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTrace_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Trace_declarationContext trace_declaration() {
		Trace_declarationContext _localctx = new Trace_declarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_trace_declaration);
		try {
			State = 234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 227; trace_declaration_begin();
				State = 228; trace_declaration_end();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 230; trace_declaration_begin();
				State = 231; trace_assignment_expression_list();
				State = 232; trace_declaration_end();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Clock_declarationContext : ParserRuleContext {
		public ITerminalNode CLOCK() { return GetToken(CtfParser.CLOCK, 0); }
		public Clock_declaration_beginContext clock_declaration_begin() {
			return GetRuleContext<Clock_declaration_beginContext>(0);
		}
		public Clock_declaration_endContext clock_declaration_end() {
			return GetRuleContext<Clock_declaration_endContext>(0);
		}
		public Ctf_expression_listContext ctf_expression_list() {
			return GetRuleContext<Ctf_expression_listContext>(0);
		}
		public Clock_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clock_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterClock_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitClock_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Clock_declarationContext clock_declaration() {
		Clock_declarationContext _localctx = new Clock_declarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_clock_declaration);
		try {
			State = 245;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 236; Match(CLOCK);
				State = 237; clock_declaration_begin();
				State = 238; clock_declaration_end();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 240; Match(CLOCK);
				State = 241; clock_declaration_begin();
				State = 242; ctf_expression_list();
				State = 243; clock_declaration_end();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Callsite_declarationContext : ParserRuleContext {
		public ITerminalNode CALLSITE() { return GetToken(CtfParser.CALLSITE, 0); }
		public Callsite_declaration_beginContext callsite_declaration_begin() {
			return GetRuleContext<Callsite_declaration_beginContext>(0);
		}
		public Callsite_declaration_endContext callsite_declaration_end() {
			return GetRuleContext<Callsite_declaration_endContext>(0);
		}
		public Ctf_expression_listContext ctf_expression_list() {
			return GetRuleContext<Ctf_expression_listContext>(0);
		}
		public Callsite_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callsite_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterCallsite_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitCallsite_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Callsite_declarationContext callsite_declaration() {
		Callsite_declarationContext _localctx = new Callsite_declarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_callsite_declaration);
		try {
			State = 256;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 247; Match(CALLSITE);
				State = 248; callsite_declaration_begin();
				State = 249; callsite_declaration_end();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 251; Match(CALLSITE);
				State = 252; callsite_declaration_begin();
				State = 253; ctf_expression_list();
				State = 254; callsite_declaration_end();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarator_listContext : ParserRuleContext {
		public Type_declaratorContext[] type_declarator() {
			return GetRuleContexts<Type_declaratorContext>();
		}
		public Type_declaratorContext type_declarator(int i) {
			return GetRuleContext<Type_declaratorContext>(i);
		}
		public Type_declarator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declarator_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterType_declarator_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitType_declarator_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_declarator_listContext type_declarator_list() {
		Type_declarator_listContext _localctx = new Type_declarator_listContext(Context, State);
		EnterRule(_localctx, 28, RULE_type_declarator_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258; type_declarator();
			State = 263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 259; Match(T__4);
				State = 260; type_declarator();
				}
				}
				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Abstract_declarator_listContext : ParserRuleContext {
		public Abstract_declaratorContext[] abstract_declarator() {
			return GetRuleContexts<Abstract_declaratorContext>();
		}
		public Abstract_declaratorContext abstract_declarator(int i) {
			return GetRuleContext<Abstract_declaratorContext>(i);
		}
		public Abstract_declarator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstract_declarator_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterAbstract_declarator_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitAbstract_declarator_list(this);
		}
	}

	[RuleVersion(0)]
	public Abstract_declarator_listContext abstract_declarator_list() {
		Abstract_declarator_listContext _localctx = new Abstract_declarator_listContext(Context, State);
		EnterRule(_localctx, 30, RULE_abstract_declarator_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; abstract_declarator();
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 267; Match(T__4);
				State = 268; abstract_declarator();
				}
				}
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alias_declaration_specifiersContext : ParserRuleContext {
		public Type_specifierContext type_specifier() {
			return GetRuleContext<Type_specifierContext>(0);
		}
		public Alias_declaration_specifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias_declaration_specifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterAlias_declaration_specifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitAlias_declaration_specifiers(this);
		}
	}

	[RuleVersion(0)]
	public Alias_declaration_specifiersContext alias_declaration_specifiers() {
		Alias_declaration_specifiersContext _localctx = new Alias_declaration_specifiersContext(Context, State);
		EnterRule(_localctx, 32, RULE_alias_declaration_specifiers);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; type_specifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alias_abstract_declarator_listContext : ParserRuleContext {
		public Alias_abstract_declaratorContext[] alias_abstract_declarator() {
			return GetRuleContexts<Alias_abstract_declaratorContext>();
		}
		public Alias_abstract_declaratorContext alias_abstract_declarator(int i) {
			return GetRuleContext<Alias_abstract_declaratorContext>(i);
		}
		public Alias_abstract_declarator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias_abstract_declarator_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterAlias_abstract_declarator_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitAlias_abstract_declarator_list(this);
		}
	}

	[RuleVersion(0)]
	public Alias_abstract_declarator_listContext alias_abstract_declarator_list() {
		Alias_abstract_declarator_listContext _localctx = new Alias_abstract_declarator_listContext(Context, State);
		EnterRule(_localctx, 34, RULE_alias_abstract_declarator_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; alias_abstract_declarator();
			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 277; Match(T__4);
				State = 278; alias_abstract_declarator();
				}
				}
				State = 283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dynamic_scope_type_assignmentContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CtfParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CtfParser.IDENTIFIER, i);
		}
		public Declaration_specifiersContext declaration_specifiers() {
			return GetRuleContext<Declaration_specifiersContext>(0);
		}
		public Dynamic_scope_type_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamic_scope_type_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterDynamic_scope_type_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitDynamic_scope_type_assignment(this);
		}
	}

	[RuleVersion(0)]
	public Dynamic_scope_type_assignmentContext dynamic_scope_type_assignment() {
		Dynamic_scope_type_assignmentContext _localctx = new Dynamic_scope_type_assignmentContext(Context, State);
		EnterRule(_localctx, 36, RULE_dynamic_scope_type_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284; Match(IDENTIFIER);
			State = 285; Match(T__5);
			State = 286; Match(IDENTIFIER);
			State = 287; Match(T__1);
			State = 288; declaration_specifiers();
			State = 289; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trace_assignment_expression_listContext : ParserRuleContext {
		public Ctf_expressionContext[] ctf_expression() {
			return GetRuleContexts<Ctf_expressionContext>();
		}
		public Ctf_expressionContext ctf_expression(int i) {
			return GetRuleContext<Ctf_expressionContext>(i);
		}
		public Dynamic_scope_type_assignmentContext[] dynamic_scope_type_assignment() {
			return GetRuleContexts<Dynamic_scope_type_assignmentContext>();
		}
		public Dynamic_scope_type_assignmentContext dynamic_scope_type_assignment(int i) {
			return GetRuleContext<Dynamic_scope_type_assignmentContext>(i);
		}
		public Trace_assignment_expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trace_assignment_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTrace_assignment_expression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTrace_assignment_expression_list(this);
		}
	}

	[RuleVersion(0)]
	public Trace_assignment_expression_listContext trace_assignment_expression_list() {
		Trace_assignment_expression_listContext _localctx = new Trace_assignment_expression_listContext(Context, State);
		EnterRule(_localctx, 38, RULE_trace_assignment_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 293;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 291; ctf_expression();
					}
					break;
				case 2:
					{
					State = 292; dynamic_scope_type_assignment();
					}
					break;
				}
				}
				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__14) | (1L << T__15) | (1L << ALIGN) | (1L << CALLSITE) | (1L << CLOCK) | (1L << ENUM) | (1L << ENV) | (1L << EVENT) | (1L << FLOATING_POINT) | (1L << INTEGER) | (1L << STREAM) | (1L << STRING) | (1L << STRUCT) | (1L << TRACE) | (1L << TYPEALIAS) | (1L << TYPEDEF) | (1L << VARIANT) | (1L << DECIMAL_LITERAL) | (1L << OCTAL_LITERAL) | (1L << HEXADECIMAL_LITERAL) | (1L << IDENTIFIER) | (1L << STRING_LITERAL) | (1L << CHARACTER_LITERAL))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stream_assignment_expression_listContext : ParserRuleContext {
		public Ctf_expressionContext[] ctf_expression() {
			return GetRuleContexts<Ctf_expressionContext>();
		}
		public Ctf_expressionContext ctf_expression(int i) {
			return GetRuleContext<Ctf_expressionContext>(i);
		}
		public Dynamic_scope_type_assignmentContext[] dynamic_scope_type_assignment() {
			return GetRuleContexts<Dynamic_scope_type_assignmentContext>();
		}
		public Dynamic_scope_type_assignmentContext dynamic_scope_type_assignment(int i) {
			return GetRuleContext<Dynamic_scope_type_assignmentContext>(i);
		}
		public Stream_assignment_expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stream_assignment_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStream_assignment_expression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStream_assignment_expression_list(this);
		}
	}

	[RuleVersion(0)]
	public Stream_assignment_expression_listContext stream_assignment_expression_list() {
		Stream_assignment_expression_listContext _localctx = new Stream_assignment_expression_listContext(Context, State);
		EnterRule(_localctx, 40, RULE_stream_assignment_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 299;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 297; ctf_expression();
					}
					break;
				case 2:
					{
					State = 298; dynamic_scope_type_assignment();
					}
					break;
				}
				}
				State = 301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__14) | (1L << T__15) | (1L << ALIGN) | (1L << CALLSITE) | (1L << CLOCK) | (1L << ENUM) | (1L << ENV) | (1L << EVENT) | (1L << FLOATING_POINT) | (1L << INTEGER) | (1L << STREAM) | (1L << STRING) | (1L << STRUCT) | (1L << TRACE) | (1L << TYPEALIAS) | (1L << TYPEDEF) | (1L << VARIANT) | (1L << DECIMAL_LITERAL) | (1L << OCTAL_LITERAL) | (1L << HEXADECIMAL_LITERAL) | (1L << IDENTIFIER) | (1L << STRING_LITERAL) | (1L << CHARACTER_LITERAL))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ctf_expressionContext : ParserRuleContext {
		public Ctf_assignment_expressionContext ctf_assignment_expression() {
			return GetRuleContext<Ctf_assignment_expressionContext>(0);
		}
		public Typedef_declarationContext typedef_declaration() {
			return GetRuleContext<Typedef_declarationContext>(0);
		}
		public Typealias_declarationContext typealias_declaration() {
			return GetRuleContext<Typealias_declarationContext>(0);
		}
		public Ctf_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctf_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterCtf_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitCtf_expression(this);
		}
	}

	[RuleVersion(0)]
	public Ctf_expressionContext ctf_expression() {
		Ctf_expressionContext _localctx = new Ctf_expressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_ctf_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 303; ctf_assignment_expression();
				}
				break;
			case 2:
				{
				State = 304; typedef_declaration();
				}
				break;
			case 3:
				{
				State = 305; typealias_declaration();
				}
				break;
			}
			State = 308; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ctf_expression_listContext : ParserRuleContext {
		public Ctf_expressionContext[] ctf_expression() {
			return GetRuleContexts<Ctf_expressionContext>();
		}
		public Ctf_expressionContext ctf_expression(int i) {
			return GetRuleContext<Ctf_expressionContext>(i);
		}
		public Ctf_expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctf_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterCtf_expression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitCtf_expression_list(this);
		}
	}

	[RuleVersion(0)]
	public Ctf_expression_listContext ctf_expression_list() {
		Ctf_expression_listContext _localctx = new Ctf_expression_listContext(Context, State);
		EnterRule(_localctx, 44, RULE_ctf_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 310; ctf_expression();
				}
				}
				State = 313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__14) | (1L << T__15) | (1L << ALIGN) | (1L << CALLSITE) | (1L << CLOCK) | (1L << ENUM) | (1L << ENV) | (1L << EVENT) | (1L << FLOATING_POINT) | (1L << INTEGER) | (1L << STREAM) | (1L << STRING) | (1L << STRUCT) | (1L << TRACE) | (1L << TYPEALIAS) | (1L << TYPEDEF) | (1L << VARIANT) | (1L << DECIMAL_LITERAL) | (1L << OCTAL_LITERAL) | (1L << HEXADECIMAL_LITERAL) | (1L << IDENTIFIER) | (1L << STRING_LITERAL) | (1L << CHARACTER_LITERAL))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_type_specifierContext : ParserRuleContext {
		public Enum_type_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_type_specifier; } }
	 
		public Enum_type_specifierContext() { }
		public virtual void CopyFrom(Enum_type_specifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AnonymousEnumTypeSpecifiedBaseContext : Enum_type_specifierContext {
		public Enum_integer_declaration_specifiersContext enum_integer_declaration_specifiers() {
			return GetRuleContext<Enum_integer_declaration_specifiersContext>(0);
		}
		public Enumerator_listContext enumerator_list() {
			return GetRuleContext<Enumerator_listContext>(0);
		}
		public AnonymousEnumTypeSpecifiedBaseContext(Enum_type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterAnonymousEnumTypeSpecifiedBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitAnonymousEnumTypeSpecifiedBase(this);
		}
	}
	public partial class AnonymousEnumTypeDefaultBaseContext : Enum_type_specifierContext {
		public Enumerator_listContext enumerator_list() {
			return GetRuleContext<Enumerator_listContext>(0);
		}
		public AnonymousEnumTypeDefaultBaseContext(Enum_type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterAnonymousEnumTypeDefaultBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitAnonymousEnumTypeDefaultBase(this);
		}
	}
	public partial class NamedEnumTypeSpecifiedBaseContext : Enum_type_specifierContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		public Enum_integer_declaration_specifiersContext enum_integer_declaration_specifiers() {
			return GetRuleContext<Enum_integer_declaration_specifiersContext>(0);
		}
		public Enumerator_listContext enumerator_list() {
			return GetRuleContext<Enumerator_listContext>(0);
		}
		public NamedEnumTypeSpecifiedBaseContext(Enum_type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterNamedEnumTypeSpecifiedBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitNamedEnumTypeSpecifiedBase(this);
		}
	}
	public partial class NamedEnumTypeDefaultBaseContext : Enum_type_specifierContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		public Enumerator_listContext enumerator_list() {
			return GetRuleContext<Enumerator_listContext>(0);
		}
		public NamedEnumTypeDefaultBaseContext(Enum_type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterNamedEnumTypeDefaultBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitNamedEnumTypeDefaultBase(this);
		}
	}

	[RuleVersion(0)]
	public Enum_type_specifierContext enum_type_specifier() {
		Enum_type_specifierContext _localctx = new Enum_type_specifierContext(Context, State);
		EnterRule(_localctx, 46, RULE_enum_type_specifier);
		try {
			State = 363;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				_localctx = new AnonymousEnumTypeDefaultBaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 315; Match(T__2);
				State = 316; enumerator_list();
				State = 317; Match(T__3);
				}
				break;
			case 2:
				_localctx = new AnonymousEnumTypeDefaultBaseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 319; Match(T__2);
				State = 320; enumerator_list();
				State = 321; Match(T__4);
				State = 322; Match(T__3);
				}
				break;
			case 3:
				_localctx = new AnonymousEnumTypeSpecifiedBaseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 324; Match(T__6);
				State = 325; enum_integer_declaration_specifiers(0);
				State = 326; Match(T__2);
				State = 327; enumerator_list();
				State = 328; Match(T__3);
				}
				break;
			case 4:
				_localctx = new AnonymousEnumTypeSpecifiedBaseContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 330; Match(T__6);
				State = 331; enum_integer_declaration_specifiers(0);
				State = 332; Match(T__2);
				State = 333; enumerator_list();
				State = 334; Match(T__4);
				State = 335; Match(T__3);
				}
				break;
			case 5:
				_localctx = new NamedEnumTypeDefaultBaseContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 337; Match(IDENTIFIER);
				State = 338; Match(T__2);
				State = 339; enumerator_list();
				State = 340; Match(T__3);
				}
				break;
			case 6:
				_localctx = new NamedEnumTypeDefaultBaseContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 342; Match(IDENTIFIER);
				State = 343; Match(T__2);
				State = 344; enumerator_list();
				State = 345; Match(T__4);
				State = 346; Match(T__3);
				}
				break;
			case 7:
				_localctx = new NamedEnumTypeSpecifiedBaseContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 348; Match(IDENTIFIER);
				State = 349; Match(T__6);
				State = 350; enum_integer_declaration_specifiers(0);
				State = 351; Match(T__2);
				State = 352; enumerator_list();
				State = 353; Match(T__3);
				}
				break;
			case 8:
				_localctx = new NamedEnumTypeSpecifiedBaseContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 355; Match(IDENTIFIER);
				State = 356; Match(T__6);
				State = 357; enum_integer_declaration_specifiers(0);
				State = 358; Match(T__2);
				State = 359; enumerator_list();
				State = 360; Match(T__4);
				State = 361; Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variant_type_specifierContext : ParserRuleContext {
		public Variant_type_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_type_specifier; } }
	 
		public Variant_type_specifierContext() { }
		public virtual void CopyFrom(Variant_type_specifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamedVariantNoTagContext : Variant_type_specifierContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		public Variant_declaration_beginContext variant_declaration_begin() {
			return GetRuleContext<Variant_declaration_beginContext>(0);
		}
		public Struct_or_variant_declaration_listContext struct_or_variant_declaration_list() {
			return GetRuleContext<Struct_or_variant_declaration_listContext>(0);
		}
		public Variant_declaration_endContext variant_declaration_end() {
			return GetRuleContext<Variant_declaration_endContext>(0);
		}
		public NamedVariantNoTagContext(Variant_type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterNamedVariantNoTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitNamedVariantNoTag(this);
		}
	}
	public partial class AnonymousVariantContext : Variant_type_specifierContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		public Variant_declaration_beginContext variant_declaration_begin() {
			return GetRuleContext<Variant_declaration_beginContext>(0);
		}
		public Struct_or_variant_declaration_listContext struct_or_variant_declaration_list() {
			return GetRuleContext<Struct_or_variant_declaration_listContext>(0);
		}
		public Variant_declaration_endContext variant_declaration_end() {
			return GetRuleContext<Variant_declaration_endContext>(0);
		}
		public AnonymousVariantContext(Variant_type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterAnonymousVariant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitAnonymousVariant(this);
		}
	}
	public partial class NamedVariantContext : Variant_type_specifierContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CtfParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CtfParser.IDENTIFIER, i);
		}
		public Variant_declaration_beginContext variant_declaration_begin() {
			return GetRuleContext<Variant_declaration_beginContext>(0);
		}
		public Struct_or_variant_declaration_listContext struct_or_variant_declaration_list() {
			return GetRuleContext<Struct_or_variant_declaration_listContext>(0);
		}
		public Variant_declaration_endContext variant_declaration_end() {
			return GetRuleContext<Variant_declaration_endContext>(0);
		}
		public NamedVariantContext(Variant_type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterNamedVariant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitNamedVariant(this);
		}
	}
	public partial class AnonymousVariantNoTagContext : Variant_type_specifierContext {
		public Variant_declaration_beginContext variant_declaration_begin() {
			return GetRuleContext<Variant_declaration_beginContext>(0);
		}
		public Struct_or_variant_declaration_listContext struct_or_variant_declaration_list() {
			return GetRuleContext<Struct_or_variant_declaration_listContext>(0);
		}
		public Variant_declaration_endContext variant_declaration_end() {
			return GetRuleContext<Variant_declaration_endContext>(0);
		}
		public AnonymousVariantNoTagContext(Variant_type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterAnonymousVariantNoTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitAnonymousVariantNoTag(this);
		}
	}
	public partial class NamedVariantNoBodyContext : Variant_type_specifierContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CtfParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CtfParser.IDENTIFIER, i);
		}
		public NamedVariantNoBodyContext(Variant_type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterNamedVariantNoBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitNamedVariantNoBody(this);
		}
	}

	[RuleVersion(0)]
	public Variant_type_specifierContext variant_type_specifier() {
		Variant_type_specifierContext _localctx = new Variant_type_specifierContext(Context, State);
		EnterRule(_localctx, 48, RULE_variant_type_specifier);
		try {
			State = 393;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				_localctx = new AnonymousVariantNoTagContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 365; variant_declaration_begin();
				State = 366; struct_or_variant_declaration_list();
				State = 367; variant_declaration_end();
				}
				break;
			case 2:
				_localctx = new AnonymousVariantContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 369; Match(T__7);
				State = 370; Match(IDENTIFIER);
				State = 371; Match(T__8);
				State = 372; variant_declaration_begin();
				State = 373; struct_or_variant_declaration_list();
				State = 374; variant_declaration_end();
				}
				break;
			case 3:
				_localctx = new NamedVariantNoTagContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 376; Match(IDENTIFIER);
				State = 377; variant_declaration_begin();
				State = 378; struct_or_variant_declaration_list();
				State = 379; variant_declaration_end();
				}
				break;
			case 4:
				_localctx = new NamedVariantContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 381; Match(IDENTIFIER);
				State = 382; Match(T__7);
				State = 383; Match(IDENTIFIER);
				State = 384; Match(T__8);
				State = 385; variant_declaration_begin();
				State = 386; struct_or_variant_declaration_list();
				State = 387; variant_declaration_end();
				}
				break;
			case 5:
				_localctx = new NamedVariantNoBodyContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 389; Match(IDENTIFIER);
				State = 390; Match(T__7);
				State = 391; Match(IDENTIFIER);
				State = 392; Match(T__8);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_type_specifierContext : ParserRuleContext {
		public Struct_type_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_type_specifier; } }
	 
		public Struct_type_specifierContext() { }
		public virtual void CopyFrom(Struct_type_specifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructAsTypeContext : Struct_type_specifierContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		public StructAsTypeContext(Struct_type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStructAsType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStructAsType(this);
		}
	}
	public partial class AnonymousStructContext : Struct_type_specifierContext {
		public Struct_declaration_beginContext struct_declaration_begin() {
			return GetRuleContext<Struct_declaration_beginContext>(0);
		}
		public Struct_or_variant_declaration_listContext struct_or_variant_declaration_list() {
			return GetRuleContext<Struct_or_variant_declaration_listContext>(0);
		}
		public Struct_declaration_endContext struct_declaration_end() {
			return GetRuleContext<Struct_declaration_endContext>(0);
		}
		public AnonymousStructContext(Struct_type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterAnonymousStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitAnonymousStruct(this);
		}
	}
	public partial class NamedAlignedStructContext : Struct_type_specifierContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		public Struct_declaration_beginContext struct_declaration_begin() {
			return GetRuleContext<Struct_declaration_beginContext>(0);
		}
		public Struct_or_variant_declaration_listContext struct_or_variant_declaration_list() {
			return GetRuleContext<Struct_or_variant_declaration_listContext>(0);
		}
		public Struct_declaration_endContext struct_declaration_end() {
			return GetRuleContext<Struct_declaration_endContext>(0);
		}
		public ITerminalNode ALIGN() { return GetToken(CtfParser.ALIGN, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public NamedAlignedStructContext(Struct_type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterNamedAlignedStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitNamedAlignedStruct(this);
		}
	}
	public partial class NamedStructContext : Struct_type_specifierContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		public Struct_declaration_beginContext struct_declaration_begin() {
			return GetRuleContext<Struct_declaration_beginContext>(0);
		}
		public Struct_or_variant_declaration_listContext struct_or_variant_declaration_list() {
			return GetRuleContext<Struct_or_variant_declaration_listContext>(0);
		}
		public Struct_declaration_endContext struct_declaration_end() {
			return GetRuleContext<Struct_declaration_endContext>(0);
		}
		public NamedStructContext(Struct_type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterNamedStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitNamedStruct(this);
		}
	}
	public partial class AnonymousAlignedStructContext : Struct_type_specifierContext {
		public Struct_declaration_beginContext struct_declaration_begin() {
			return GetRuleContext<Struct_declaration_beginContext>(0);
		}
		public Struct_or_variant_declaration_listContext struct_or_variant_declaration_list() {
			return GetRuleContext<Struct_or_variant_declaration_listContext>(0);
		}
		public Struct_declaration_endContext struct_declaration_end() {
			return GetRuleContext<Struct_declaration_endContext>(0);
		}
		public ITerminalNode ALIGN() { return GetToken(CtfParser.ALIGN, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public AnonymousAlignedStructContext(Struct_type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterAnonymousAlignedStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitAnonymousAlignedStruct(this);
		}
	}

	[RuleVersion(0)]
	public Struct_type_specifierContext struct_type_specifier() {
		Struct_type_specifierContext _localctx = new Struct_type_specifierContext(Context, State);
		EnterRule(_localctx, 50, RULE_struct_type_specifier);
		try {
			State = 422;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				_localctx = new AnonymousStructContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 395; struct_declaration_begin();
				State = 396; struct_or_variant_declaration_list();
				State = 397; struct_declaration_end();
				}
				break;
			case 2:
				_localctx = new NamedStructContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 399; Match(IDENTIFIER);
				State = 400; struct_declaration_begin();
				State = 401; struct_or_variant_declaration_list();
				State = 402; struct_declaration_end();
				}
				break;
			case 3:
				_localctx = new StructAsTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 404; Match(IDENTIFIER);
				}
				break;
			case 4:
				_localctx = new AnonymousAlignedStructContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 405; struct_declaration_begin();
				State = 406; struct_or_variant_declaration_list();
				State = 407; struct_declaration_end();
				State = 408; Match(ALIGN);
				State = 409; Match(T__9);
				State = 410; unary_expression();
				State = 411; Match(T__10);
				}
				break;
			case 5:
				_localctx = new NamedAlignedStructContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 413; Match(IDENTIFIER);
				State = 414; struct_declaration_begin();
				State = 415; struct_or_variant_declaration_list();
				State = 416; struct_declaration_end();
				State = 417; Match(ALIGN);
				State = 418; Match(T__9);
				State = 419; unary_expression();
				State = 420; Match(T__10);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_declaration_beginContext : ParserRuleContext {
		public ITerminalNode EVENT() { return GetToken(CtfParser.EVENT, 0); }
		public Event_declaration_beginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_declaration_begin; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEvent_declaration_begin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEvent_declaration_begin(this);
		}
	}

	[RuleVersion(0)]
	public Event_declaration_beginContext event_declaration_begin() {
		Event_declaration_beginContext _localctx = new Event_declaration_beginContext(Context, State);
		EnterRule(_localctx, 52, RULE_event_declaration_begin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424; Match(EVENT);
			State = 425; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_declaration_endContext : ParserRuleContext {
		public Event_declaration_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_declaration_end; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEvent_declaration_end(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEvent_declaration_end(this);
		}
	}

	[RuleVersion(0)]
	public Event_declaration_endContext event_declaration_end() {
		Event_declaration_endContext _localctx = new Event_declaration_endContext(Context, State);
		EnterRule(_localctx, 54, RULE_event_declaration_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427; Match(T__3);
			State = 428; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stream_declaration_beginContext : ParserRuleContext {
		public ITerminalNode STREAM() { return GetToken(CtfParser.STREAM, 0); }
		public Stream_declaration_beginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stream_declaration_begin; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStream_declaration_begin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStream_declaration_begin(this);
		}
	}

	[RuleVersion(0)]
	public Stream_declaration_beginContext stream_declaration_begin() {
		Stream_declaration_beginContext _localctx = new Stream_declaration_beginContext(Context, State);
		EnterRule(_localctx, 56, RULE_stream_declaration_begin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430; Match(STREAM);
			State = 431; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stream_declaration_endContext : ParserRuleContext {
		public Stream_declaration_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stream_declaration_end; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStream_declaration_end(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStream_declaration_end(this);
		}
	}

	[RuleVersion(0)]
	public Stream_declaration_endContext stream_declaration_end() {
		Stream_declaration_endContext _localctx = new Stream_declaration_endContext(Context, State);
		EnterRule(_localctx, 58, RULE_stream_declaration_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433; Match(T__3);
			State = 434; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Env_declaration_beginContext : ParserRuleContext {
		public ITerminalNode ENV() { return GetToken(CtfParser.ENV, 0); }
		public Env_declaration_beginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_env_declaration_begin; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnv_declaration_begin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnv_declaration_begin(this);
		}
	}

	[RuleVersion(0)]
	public Env_declaration_beginContext env_declaration_begin() {
		Env_declaration_beginContext _localctx = new Env_declaration_beginContext(Context, State);
		EnterRule(_localctx, 60, RULE_env_declaration_begin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436; Match(ENV);
			State = 437; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Env_declaration_endContext : ParserRuleContext {
		public Env_declaration_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_env_declaration_end; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnv_declaration_end(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnv_declaration_end(this);
		}
	}

	[RuleVersion(0)]
	public Env_declaration_endContext env_declaration_end() {
		Env_declaration_endContext _localctx = new Env_declaration_endContext(Context, State);
		EnterRule(_localctx, 62, RULE_env_declaration_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439; Match(T__3);
			State = 440; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trace_declaration_beginContext : ParserRuleContext {
		public ITerminalNode TRACE() { return GetToken(CtfParser.TRACE, 0); }
		public Trace_declaration_beginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trace_declaration_begin; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTrace_declaration_begin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTrace_declaration_begin(this);
		}
	}

	[RuleVersion(0)]
	public Trace_declaration_beginContext trace_declaration_begin() {
		Trace_declaration_beginContext _localctx = new Trace_declaration_beginContext(Context, State);
		EnterRule(_localctx, 64, RULE_trace_declaration_begin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442; Match(TRACE);
			State = 443; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trace_declaration_endContext : ParserRuleContext {
		public Trace_declaration_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trace_declaration_end; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTrace_declaration_end(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTrace_declaration_end(this);
		}
	}

	[RuleVersion(0)]
	public Trace_declaration_endContext trace_declaration_end() {
		Trace_declaration_endContext _localctx = new Trace_declaration_endContext(Context, State);
		EnterRule(_localctx, 66, RULE_trace_declaration_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445; Match(T__3);
			State = 446; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Clock_declaration_beginContext : ParserRuleContext {
		public Clock_declaration_beginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clock_declaration_begin; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterClock_declaration_begin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitClock_declaration_begin(this);
		}
	}

	[RuleVersion(0)]
	public Clock_declaration_beginContext clock_declaration_begin() {
		Clock_declaration_beginContext _localctx = new Clock_declaration_beginContext(Context, State);
		EnterRule(_localctx, 68, RULE_clock_declaration_begin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Clock_declaration_endContext : ParserRuleContext {
		public Clock_declaration_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clock_declaration_end; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterClock_declaration_end(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitClock_declaration_end(this);
		}
	}

	[RuleVersion(0)]
	public Clock_declaration_endContext clock_declaration_end() {
		Clock_declaration_endContext _localctx = new Clock_declaration_endContext(Context, State);
		EnterRule(_localctx, 70, RULE_clock_declaration_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450; Match(T__3);
			State = 451; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Callsite_declaration_beginContext : ParserRuleContext {
		public Callsite_declaration_beginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callsite_declaration_begin; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterCallsite_declaration_begin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitCallsite_declaration_begin(this);
		}
	}

	[RuleVersion(0)]
	public Callsite_declaration_beginContext callsite_declaration_begin() {
		Callsite_declaration_beginContext _localctx = new Callsite_declaration_beginContext(Context, State);
		EnterRule(_localctx, 72, RULE_callsite_declaration_begin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Callsite_declaration_endContext : ParserRuleContext {
		public Callsite_declaration_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callsite_declaration_end; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterCallsite_declaration_end(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitCallsite_declaration_end(this);
		}
	}

	[RuleVersion(0)]
	public Callsite_declaration_endContext callsite_declaration_end() {
		Callsite_declaration_endContext _localctx = new Callsite_declaration_endContext(Context, State);
		EnterRule(_localctx, 74, RULE_callsite_declaration_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455; Match(T__3);
			State = 456; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declaratorContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		public Type_declaratorContext type_declarator() {
			return GetRuleContext<Type_declaratorContext>(0);
		}
		public Type_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterType_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitType_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Type_declaratorContext type_declarator() {
		Type_declaratorContext _localctx = new Type_declaratorContext(Context, State);
		EnterRule(_localctx, 76, RULE_type_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 458; Match(IDENTIFIER);
				}
				break;
			case T__9:
				{
				{
				State = 459; Match(T__9);
				State = 460; type_declarator();
				State = 461; Match(T__10);
				}
				}
				break;
			case T__0:
			case T__4:
			case T__10:
			case T__11:
				break;
			default:
				break;
			}
			State = 471;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11) {
				{
				{
				State = 465; Match(T__11);
				State = 466; unary_expression();
				State = 467; Match(T__12);
				}
				}
				State = 473;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Abstract_declaratorContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		public Abstract_declaratorContext abstract_declarator() {
			return GetRuleContext<Abstract_declaratorContext>(0);
		}
		public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		public Abstract_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstract_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterAbstract_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitAbstract_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Abstract_declaratorContext abstract_declarator() {
		Abstract_declaratorContext _localctx = new Abstract_declaratorContext(Context, State);
		EnterRule(_localctx, 78, RULE_abstract_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 474; Match(IDENTIFIER);
				}
				break;
			case T__9:
				{
				State = 475; Match(T__9);
				State = 476; abstract_declarator();
				State = 477; Match(T__10);
				}
				break;
			case T__1:
			case T__4:
			case T__10:
			case T__11:
				break;
			default:
				break;
			}
			State = 488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11) {
				{
				{
				State = 481; Match(T__11);
				State = 483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__14) | (1L << T__15) | (1L << CLOCK) | (1L << ENV) | (1L << EVENT) | (1L << STREAM) | (1L << TRACE) | (1L << DECIMAL_LITERAL) | (1L << OCTAL_LITERAL) | (1L << HEXADECIMAL_LITERAL) | (1L << IDENTIFIER) | (1L << STRING_LITERAL) | (1L << CHARACTER_LITERAL))) != 0)) {
					{
					State = 482; unary_expression();
					}
				}

				State = 485; Match(T__12);
				}
				}
				State = 490;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alias_abstract_declaratorContext : ParserRuleContext {
		public Alias_abstract_declaratorContext alias_abstract_declarator() {
			return GetRuleContext<Alias_abstract_declaratorContext>(0);
		}
		public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		public Alias_abstract_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias_abstract_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterAlias_abstract_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitAlias_abstract_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Alias_abstract_declaratorContext alias_abstract_declarator() {
		Alias_abstract_declaratorContext _localctx = new Alias_abstract_declaratorContext(Context, State);
		EnterRule(_localctx, 80, RULE_alias_abstract_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 491; Match(T__9);
				State = 492; alias_abstract_declarator();
				State = 493; Match(T__10);
				}
			}

			State = 504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11) {
				{
				{
				State = 497; Match(T__11);
				State = 499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__14) | (1L << T__15) | (1L << CLOCK) | (1L << ENV) | (1L << EVENT) | (1L << STREAM) | (1L << TRACE) | (1L << DECIMAL_LITERAL) | (1L << OCTAL_LITERAL) | (1L << HEXADECIMAL_LITERAL) | (1L << IDENTIFIER) | (1L << STRING_LITERAL) | (1L << CHARACTER_LITERAL))) != 0)) {
					{
					State = 498; unary_expression();
					}
				}

				State = 501; Match(T__12);
				}
				}
				State = 506;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ctf_assignment_expressionContext : ParserRuleContext {
		public Ctf_assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctf_assignment_expression; } }
	 
		public Ctf_assignment_expressionContext() { }
		public virtual void CopyFrom(Ctf_assignment_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CtfTypeAssignmentContext : Ctf_assignment_expressionContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Declaration_specifiersContext declaration_specifiers() {
			return GetRuleContext<Declaration_specifiersContext>(0);
		}
		public CtfTypeAssignmentContext(Ctf_assignment_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterCtfTypeAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitCtfTypeAssignment(this);
		}
	}
	public partial class CtfDynamicScopeAssignmentContext : Ctf_assignment_expressionContext {
		public Dynamic_referenceContext dynamic_reference() {
			return GetRuleContext<Dynamic_referenceContext>(0);
		}
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public CtfDynamicScopeAssignmentContext(Ctf_assignment_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterCtfDynamicScopeAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitCtfDynamicScopeAssignment(this);
		}
	}
	public partial class CtfIdentifierAssignmentContext : Ctf_assignment_expressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public CtfIdentifierAssignmentContext(Ctf_assignment_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterCtfIdentifierAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitCtfIdentifierAssignment(this);
		}
	}
	public partial class CtfKeywordAssignmentContext : Ctf_assignment_expressionContext {
		public KeywordsContext keywords() {
			return GetRuleContext<KeywordsContext>(0);
		}
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public CtfKeywordAssignmentContext(Ctf_assignment_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterCtfKeywordAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitCtfKeywordAssignment(this);
		}
	}

	[RuleVersion(0)]
	public Ctf_assignment_expressionContext ctf_assignment_expression() {
		Ctf_assignment_expressionContext _localctx = new Ctf_assignment_expressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_ctf_assignment_expression);
		try {
			State = 522;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				_localctx = new CtfIdentifierAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 507; Match(IDENTIFIER);
				State = 508; Match(T__13);
				State = 509; unary_expression();
				}
				break;
			case 2:
				_localctx = new CtfDynamicScopeAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 510; dynamic_reference();
				State = 511; Match(T__13);
				State = 512; unary_expression();
				}
				break;
			case 3:
				_localctx = new CtfKeywordAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 514; keywords();
				State = 515; Match(T__13);
				State = 516; unary_expression();
				}
				break;
			case 4:
				_localctx = new CtfTypeAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 518; unary_expression();
				State = 519; Match(T__1);
				State = 520; declaration_specifiers();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enumerator_listContext : ParserRuleContext {
		public EnumeratorContext[] enumerator() {
			return GetRuleContexts<EnumeratorContext>();
		}
		public EnumeratorContext enumerator(int i) {
			return GetRuleContext<EnumeratorContext>(i);
		}
		public Enumerator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumerator_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumerator_list(this);
		}
	}

	[RuleVersion(0)]
	public Enumerator_listContext enumerator_list() {
		Enumerator_listContext _localctx = new Enumerator_listContext(Context, State);
		EnterRule(_localctx, 84, RULE_enumerator_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 524; enumerator();
			State = 529;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 525; Match(T__4);
					State = 526; enumerator();
					}
					} 
				}
				State = 531;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_integer_declaration_specifiersContext : ParserRuleContext {
		public Enum_integer_declaration_specifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_integer_declaration_specifiers; } }
	 
		public Enum_integer_declaration_specifiersContext() { }
		public virtual void CopyFrom(Enum_integer_declaration_specifiersContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EnumIntegerDeclarationsAndTypeSpecifierContext : Enum_integer_declaration_specifiersContext {
		public Enum_integer_declaration_specifiersContext enum_integer_declaration_specifiers() {
			return GetRuleContext<Enum_integer_declaration_specifiersContext>(0);
		}
		public Enum_integer_type_specifierContext enum_integer_type_specifier() {
			return GetRuleContext<Enum_integer_type_specifierContext>(0);
		}
		public EnumIntegerDeclarationsAndTypeSpecifierContext(Enum_integer_declaration_specifiersContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumIntegerDeclarationsAndTypeSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumIntegerDeclarationsAndTypeSpecifier(this);
		}
	}
	public partial class EnumIntegerDeclarationTypeSpecifierContext : Enum_integer_declaration_specifiersContext {
		public Enum_integer_type_specifierContext enum_integer_type_specifier() {
			return GetRuleContext<Enum_integer_type_specifierContext>(0);
		}
		public EnumIntegerDeclarationTypeSpecifierContext(Enum_integer_declaration_specifiersContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumIntegerDeclarationTypeSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumIntegerDeclarationTypeSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public Enum_integer_declaration_specifiersContext enum_integer_declaration_specifiers() {
		return enum_integer_declaration_specifiers(0);
	}

	private Enum_integer_declaration_specifiersContext enum_integer_declaration_specifiers(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Enum_integer_declaration_specifiersContext _localctx = new Enum_integer_declaration_specifiersContext(Context, _parentState);
		Enum_integer_declaration_specifiersContext _prevctx = _localctx;
		int _startState = 86;
		EnterRecursionRule(_localctx, 86, RULE_enum_integer_declaration_specifiers, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new EnumIntegerDeclarationTypeSpecifierContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 533; enum_integer_type_specifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 539;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new EnumIntegerDeclarationsAndTypeSpecifierContext(new Enum_integer_declaration_specifiersContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_enum_integer_declaration_specifiers);
					State = 535;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 536; enum_integer_type_specifier();
					}
					} 
				}
				State = 541;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Variant_declaration_beginContext : ParserRuleContext {
		public Variant_declaration_beginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_declaration_begin; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterVariant_declaration_begin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitVariant_declaration_begin(this);
		}
	}

	[RuleVersion(0)]
	public Variant_declaration_beginContext variant_declaration_begin() {
		Variant_declaration_beginContext _localctx = new Variant_declaration_beginContext(Context, State);
		EnterRule(_localctx, 88, RULE_variant_declaration_begin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 542; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variant_declaration_endContext : ParserRuleContext {
		public Variant_declaration_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_declaration_end; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterVariant_declaration_end(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitVariant_declaration_end(this);
		}
	}

	[RuleVersion(0)]
	public Variant_declaration_endContext variant_declaration_end() {
		Variant_declaration_endContext _localctx = new Variant_declaration_endContext(Context, State);
		EnterRule(_localctx, 90, RULE_variant_declaration_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_or_variant_declaration_listContext : ParserRuleContext {
		public Struct_or_variant_declarationContext[] struct_or_variant_declaration() {
			return GetRuleContexts<Struct_or_variant_declarationContext>();
		}
		public Struct_or_variant_declarationContext struct_or_variant_declaration(int i) {
			return GetRuleContext<Struct_or_variant_declarationContext>(i);
		}
		public Struct_or_variant_declaration_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_or_variant_declaration_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStruct_or_variant_declaration_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStruct_or_variant_declaration_list(this);
		}
	}

	[RuleVersion(0)]
	public Struct_or_variant_declaration_listContext struct_or_variant_declaration_list() {
		Struct_or_variant_declaration_listContext _localctx = new Struct_or_variant_declaration_listContext(Context, State);
		EnterRule(_localctx, 92, RULE_struct_or_variant_declaration_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ENUM) | (1L << FLOATING_POINT) | (1L << INTEGER) | (1L << STRING) | (1L << STRUCT) | (1L << TYPEALIAS) | (1L << TYPEDEF) | (1L << VARIANT) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 546; struct_or_variant_declaration();
				}
				}
				State = 551;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_declaration_beginContext : ParserRuleContext {
		public Struct_declaration_beginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_declaration_begin; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStruct_declaration_begin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStruct_declaration_begin(this);
		}
	}

	[RuleVersion(0)]
	public Struct_declaration_beginContext struct_declaration_begin() {
		Struct_declaration_beginContext _localctx = new Struct_declaration_beginContext(Context, State);
		EnterRule(_localctx, 94, RULE_struct_declaration_begin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_declaration_endContext : ParserRuleContext {
		public Struct_declaration_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_declaration_end; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStruct_declaration_end(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStruct_declaration_end(this);
		}
	}

	[RuleVersion(0)]
	public Struct_declaration_endContext struct_declaration_end() {
		Struct_declaration_endContext _localctx = new Struct_declaration_endContext(Context, State);
		EnterRule(_localctx, 96, RULE_struct_declaration_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 554; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
	 
		public Unary_expressionContext() { }
		public virtual void CopyFrom(Unary_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PostfixExpressionUnaryExpressionContext : Unary_expressionContext {
		public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		public PostfixExpressionUnaryExpressionContext(Unary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterPostfixExpressionUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitPostfixExpressionUnaryExpression(this);
		}
	}
	public partial class PositiveUnaryExpressionContext : Unary_expressionContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public PositiveUnaryExpressionContext(Unary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterPositiveUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitPositiveUnaryExpression(this);
		}
	}
	public partial class NegativeUnaryExpressionContext : Unary_expressionContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public NegativeUnaryExpressionContext(Unary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterNegativeUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitNegativeUnaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 98, RULE_unary_expression);
		try {
			State = 561;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
			case CLOCK:
			case ENV:
			case EVENT:
			case STREAM:
			case TRACE:
			case DECIMAL_LITERAL:
			case OCTAL_LITERAL:
			case HEXADECIMAL_LITERAL:
			case IDENTIFIER:
			case STRING_LITERAL:
			case CHARACTER_LITERAL:
				_localctx = new PostfixExpressionUnaryExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 556; postfix_expression();
				}
				break;
			case T__14:
				_localctx = new PositiveUnaryExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 557; Match(T__14);
				State = 558; unary_expression();
				}
				break;
			case T__15:
				_localctx = new NegativeUnaryExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 559; Match(T__15);
				State = 560; unary_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorContext : ParserRuleContext {
		public EnumeratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator; } }
	 
		public EnumeratorContext() { }
		public virtual void CopyFrom(EnumeratorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EnumIdentifierAssignedValueContext : EnumeratorContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		public Enumerator_mappingContext enumerator_mapping() {
			return GetRuleContext<Enumerator_mappingContext>(0);
		}
		public EnumIdentifierAssignedValueContext(EnumeratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumIdentifierAssignedValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumIdentifierAssignedValue(this);
		}
	}
	public partial class EnumKeywordAssignedValueContext : EnumeratorContext {
		public KeywordsContext keywords() {
			return GetRuleContext<KeywordsContext>(0);
		}
		public Enumerator_mappingContext enumerator_mapping() {
			return GetRuleContext<Enumerator_mappingContext>(0);
		}
		public EnumKeywordAssignedValueContext(EnumeratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumKeywordAssignedValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumKeywordAssignedValue(this);
		}
	}
	public partial class EnumStringLiteralValueContext : EnumeratorContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(CtfParser.STRING_LITERAL, 0); }
		public EnumStringLiteralValueContext(EnumeratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumStringLiteralValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumStringLiteralValue(this);
		}
	}
	public partial class EnumStringLiteralAssignedValueContext : EnumeratorContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(CtfParser.STRING_LITERAL, 0); }
		public Enumerator_mappingContext enumerator_mapping() {
			return GetRuleContext<Enumerator_mappingContext>(0);
		}
		public EnumStringLiteralAssignedValueContext(EnumeratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumStringLiteralAssignedValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumStringLiteralAssignedValue(this);
		}
	}
	public partial class EnumKeywordValueContext : EnumeratorContext {
		public KeywordsContext keywords() {
			return GetRuleContext<KeywordsContext>(0);
		}
		public EnumKeywordValueContext(EnumeratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumKeywordValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumKeywordValue(this);
		}
	}
	public partial class EnumIdentifierValueContext : EnumeratorContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		public EnumIdentifierValueContext(EnumeratorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumIdentifierValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumIdentifierValue(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorContext enumerator() {
		EnumeratorContext _localctx = new EnumeratorContext(Context, State);
		EnterRule(_localctx, 100, RULE_enumerator);
		try {
			State = 576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				_localctx = new EnumIdentifierValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 563; Match(IDENTIFIER);
				}
				break;
			case 2:
				_localctx = new EnumKeywordValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 564; keywords();
				}
				break;
			case 3:
				_localctx = new EnumStringLiteralValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 565; Match(STRING_LITERAL);
				}
				break;
			case 4:
				_localctx = new EnumIdentifierAssignedValueContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 566; Match(IDENTIFIER);
				State = 567; Match(T__13);
				State = 568; enumerator_mapping();
				}
				break;
			case 5:
				_localctx = new EnumKeywordAssignedValueContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 569; keywords();
				State = 570; Match(T__13);
				State = 571; enumerator_mapping();
				}
				break;
			case 6:
				_localctx = new EnumStringLiteralAssignedValueContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 573; Match(STRING_LITERAL);
				State = 574; Match(T__13);
				State = 575; enumerator_mapping();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_integer_type_specifierContext : ParserRuleContext {
		public Enum_integer_type_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_integer_type_specifier; } }
	 
		public Enum_integer_type_specifierContext() { }
		public virtual void CopyFrom(Enum_integer_type_specifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EnumIntegerSpecifierWithDefaultsContext : Enum_integer_type_specifierContext {
		public ITerminalNode INTEGER() { return GetToken(CtfParser.INTEGER, 0); }
		public EnumIntegerSpecifierWithDefaultsContext(Enum_integer_type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumIntegerSpecifierWithDefaults(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumIntegerSpecifierWithDefaults(this);
		}
	}
	public partial class EnumIntegerSpecifierFromTypeContext : Enum_integer_type_specifierContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		public EnumIntegerSpecifierFromTypeContext(Enum_integer_type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumIntegerSpecifierFromType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumIntegerSpecifierFromType(this);
		}
	}
	public partial class EnumIntegerSpecifierContext : Enum_integer_type_specifierContext {
		public ITerminalNode INTEGER() { return GetToken(CtfParser.INTEGER, 0); }
		public Ctf_expression_listContext ctf_expression_list() {
			return GetRuleContext<Ctf_expression_listContext>(0);
		}
		public EnumIntegerSpecifierContext(Enum_integer_type_specifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumIntegerSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumIntegerSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public Enum_integer_type_specifierContext enum_integer_type_specifier() {
		Enum_integer_type_specifierContext _localctx = new Enum_integer_type_specifierContext(Context, State);
		EnterRule(_localctx, 102, RULE_enum_integer_type_specifier);
		try {
			State = 587;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				_localctx = new EnumIntegerSpecifierFromTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 578; Match(IDENTIFIER);
				}
				break;
			case 2:
				_localctx = new EnumIntegerSpecifierWithDefaultsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 579; Match(INTEGER);
				State = 580; Match(T__2);
				State = 581; Match(T__3);
				}
				break;
			case 3:
				_localctx = new EnumIntegerSpecifierContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 582; Match(INTEGER);
				State = 583; Match(T__2);
				State = 584; ctf_expression_list();
				State = 585; Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_or_variant_declarationContext : ParserRuleContext {
		public Struct_or_variant_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_or_variant_declaration; } }
	 
		public Struct_or_variant_declarationContext() { }
		public virtual void CopyFrom(Struct_or_variant_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructOrVariantTypedefContext : Struct_or_variant_declarationContext {
		public Typedef_declarationContext typedef_declaration() {
			return GetRuleContext<Typedef_declarationContext>(0);
		}
		public StructOrVariantTypedefContext(Struct_or_variant_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStructOrVariantTypedef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStructOrVariantTypedef(this);
		}
	}
	public partial class StructOrVariantDeclarationContext : Struct_or_variant_declarationContext {
		public Declaration_specifiersContext declaration_specifiers() {
			return GetRuleContext<Declaration_specifiersContext>(0);
		}
		public Struct_or_variant_declarator_listContext struct_or_variant_declarator_list() {
			return GetRuleContext<Struct_or_variant_declarator_listContext>(0);
		}
		public StructOrVariantDeclarationContext(Struct_or_variant_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStructOrVariantDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStructOrVariantDeclaration(this);
		}
	}
	public partial class StructOrVariantTypealiasContext : Struct_or_variant_declarationContext {
		public Typealias_declarationContext typealias_declaration() {
			return GetRuleContext<Typealias_declarationContext>(0);
		}
		public StructOrVariantTypealiasContext(Struct_or_variant_declarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStructOrVariantTypealias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStructOrVariantTypealias(this);
		}
	}

	[RuleVersion(0)]
	public Struct_or_variant_declarationContext struct_or_variant_declaration() {
		Struct_or_variant_declarationContext _localctx = new Struct_or_variant_declarationContext(Context, State);
		EnterRule(_localctx, 104, RULE_struct_or_variant_declaration);
		try {
			State = 599;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENUM:
			case FLOATING_POINT:
			case INTEGER:
			case STRING:
			case STRUCT:
			case VARIANT:
			case IDENTIFIER:
				_localctx = new StructOrVariantDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 589; declaration_specifiers();
				State = 590; struct_or_variant_declarator_list();
				State = 591; Match(T__0);
				}
				break;
			case TYPEDEF:
				_localctx = new StructOrVariantTypedefContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 593; typedef_declaration();
				State = 594; Match(T__0);
				}
				break;
			case TYPEALIAS:
				_localctx = new StructOrVariantTypealiasContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 596; typealias_declaration();
				State = 597; Match(T__0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
	 
		public IntegerLiteralContext() { }
		public virtual void CopyFrom(IntegerLiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OctalLiteralContext : IntegerLiteralContext {
		public ITerminalNode OCTAL_LITERAL() { return GetToken(CtfParser.OCTAL_LITERAL, 0); }
		public OctalLiteralContext(IntegerLiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterOctalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitOctalLiteral(this);
		}
	}
	public partial class DecimalLiteralContext : IntegerLiteralContext {
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(CtfParser.DECIMAL_LITERAL, 0); }
		public DecimalLiteralContext(IntegerLiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
	}
	public partial class HexadecimalLiteralContext : IntegerLiteralContext {
		public ITerminalNode HEXADECIMAL_LITERAL() { return GetToken(CtfParser.HEXADECIMAL_LITERAL, 0); }
		public HexadecimalLiteralContext(IntegerLiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterHexadecimalLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitHexadecimalLiteral(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 106, RULE_integerLiteral);
		try {
			State = 604;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL_LITERAL:
				_localctx = new DecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 601; Match(DECIMAL_LITERAL);
				}
				break;
			case HEXADECIMAL_LITERAL:
				_localctx = new HexadecimalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 602; Match(HEXADECIMAL_LITERAL);
				}
				break;
			case OCTAL_LITERAL:
				_localctx = new OctalLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 603; Match(OCTAL_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_expressionContext : ParserRuleContext {
		public Postfix_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_expression; } }
	 
		public Postfix_expressionContext() { }
		public virtual void CopyFrom(Postfix_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PostfixExpressionComplexContext : Postfix_expressionContext {
		public Postfix_expression_complexContext postfix_expression_complex() {
			return GetRuleContext<Postfix_expression_complexContext>(0);
		}
		public PostfixExpressionComplexContext(Postfix_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterPostfixExpressionComplex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitPostfixExpressionComplex(this);
		}
	}
	public partial class PostfixExpressionStringLiteralContext : Postfix_expressionContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(CtfParser.STRING_LITERAL, 0); }
		public PostfixExpressionStringLiteralContext(Postfix_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterPostfixExpressionStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitPostfixExpressionStringLiteral(this);
		}
	}
	public partial class PostfixExpressionIntegerLiteralContext : Postfix_expressionContext {
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public PostfixExpressionIntegerLiteralContext(Postfix_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterPostfixExpressionIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitPostfixExpressionIntegerLiteral(this);
		}
	}
	public partial class PostfixExpressionCharacterLiteralContext : Postfix_expressionContext {
		public ITerminalNode CHARACTER_LITERAL() { return GetToken(CtfParser.CHARACTER_LITERAL, 0); }
		public PostfixExpressionCharacterLiteralContext(Postfix_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterPostfixExpressionCharacterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitPostfixExpressionCharacterLiteral(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_expressionContext postfix_expression() {
		Postfix_expressionContext _localctx = new Postfix_expressionContext(Context, State);
		EnterRule(_localctx, 108, RULE_postfix_expression);
		try {
			State = 610;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL_LITERAL:
			case OCTAL_LITERAL:
			case HEXADECIMAL_LITERAL:
				_localctx = new PostfixExpressionIntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 606; integerLiteral();
				}
				break;
			case STRING_LITERAL:
				_localctx = new PostfixExpressionStringLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 607; Match(STRING_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				_localctx = new PostfixExpressionCharacterLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 608; Match(CHARACTER_LITERAL);
				}
				break;
			case T__9:
			case CLOCK:
			case ENV:
			case EVENT:
			case STREAM:
			case TRACE:
			case IDENTIFIER:
				_localctx = new PostfixExpressionComplexContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 609; postfix_expression_complex(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_expression_complexContext : ParserRuleContext {
		public Postfix_expression_complexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_expression_complex; } }
	 
		public Postfix_expression_complexContext() { }
		public virtual void CopyFrom(Postfix_expression_complexContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PostfixExpressionDynamicReferenceContext : Postfix_expression_complexContext {
		public Dynamic_referenceContext dynamic_reference() {
			return GetRuleContext<Dynamic_referenceContext>(0);
		}
		public PostfixExpressionDynamicReferenceContext(Postfix_expression_complexContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterPostfixExpressionDynamicReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitPostfixExpressionDynamicReference(this);
		}
	}
	public partial class PostfixExpressionPostfixWithBracketsContext : Postfix_expression_complexContext {
		public Postfix_expression_complexContext postfix_expression_complex() {
			return GetRuleContext<Postfix_expression_complexContext>(0);
		}
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public PostfixExpressionPostfixWithBracketsContext(Postfix_expression_complexContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterPostfixExpressionPostfixWithBrackets(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitPostfixExpressionPostfixWithBrackets(this);
		}
	}
	public partial class PostfixExpressionIdentifierContext : Postfix_expression_complexContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		public PostfixExpressionIdentifierContext(Postfix_expression_complexContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterPostfixExpressionIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitPostfixExpressionIdentifier(this);
		}
	}
	public partial class PostfixExpressionParentheseUnaryExpressionContext : Postfix_expression_complexContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public PostfixExpressionParentheseUnaryExpressionContext(Postfix_expression_complexContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterPostfixExpressionParentheseUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitPostfixExpressionParentheseUnaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_expression_complexContext postfix_expression_complex() {
		return postfix_expression_complex(0);
	}

	private Postfix_expression_complexContext postfix_expression_complex(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Postfix_expression_complexContext _localctx = new Postfix_expression_complexContext(Context, _parentState);
		Postfix_expression_complexContext _prevctx = _localctx;
		int _startState = 110;
		EnterRecursionRule(_localctx, 110, RULE_postfix_expression_complex, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				_localctx = new PostfixExpressionIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 613; Match(IDENTIFIER);
				}
				break;
			case CLOCK:
			case ENV:
			case EVENT:
			case STREAM:
			case TRACE:
				{
				_localctx = new PostfixExpressionDynamicReferenceContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 614; dynamic_reference();
				}
				break;
			case T__9:
				{
				_localctx = new PostfixExpressionParentheseUnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 615; Match(T__9);
				State = 616; unary_expression();
				State = 617; Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 628;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PostfixExpressionPostfixWithBracketsContext(new Postfix_expression_complexContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression_complex);
					State = 621;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 622; Match(T__11);
					State = 623; unary_expression();
					State = 624; Match(T__12);
					}
					} 
				}
				State = 630;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Dynamic_referenceContext : ParserRuleContext {
		public Dynamic_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamic_reference; } }
	 
		public Dynamic_referenceContext() { }
		public virtual void CopyFrom(Dynamic_referenceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StreamDynamicReferenceContext : Dynamic_referenceContext {
		public ITerminalNode STREAM() { return GetToken(CtfParser.STREAM, 0); }
		public ITerminalNode EVENT() { return GetToken(CtfParser.EVENT, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CtfParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CtfParser.IDENTIFIER, i);
		}
		public StreamDynamicReferenceContext(Dynamic_referenceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStreamDynamicReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStreamDynamicReference(this);
		}
	}
	public partial class EventDynamicReferenceContext : Dynamic_referenceContext {
		public ITerminalNode EVENT() { return GetToken(CtfParser.EVENT, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CtfParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CtfParser.IDENTIFIER, i);
		}
		public EventDynamicReferenceContext(Dynamic_referenceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEventDynamicReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEventDynamicReference(this);
		}
	}
	public partial class TraceDynamicReferenceContext : Dynamic_referenceContext {
		public ITerminalNode TRACE() { return GetToken(CtfParser.TRACE, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CtfParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CtfParser.IDENTIFIER, i);
		}
		public TraceDynamicReferenceContext(Dynamic_referenceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterTraceDynamicReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitTraceDynamicReference(this);
		}
	}
	public partial class EnvDynamicReferenceContext : Dynamic_referenceContext {
		public ITerminalNode ENV() { return GetToken(CtfParser.ENV, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CtfParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CtfParser.IDENTIFIER, i);
		}
		public EnvDynamicReferenceContext(Dynamic_referenceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnvDynamicReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnvDynamicReference(this);
		}
	}
	public partial class ClockDynamicReferenceContext : Dynamic_referenceContext {
		public ITerminalNode CLOCK() { return GetToken(CtfParser.CLOCK, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CtfParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CtfParser.IDENTIFIER, i);
		}
		public ClockDynamicReferenceContext(Dynamic_referenceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterClockDynamicReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitClockDynamicReference(this);
		}
	}

	[RuleVersion(0)]
	public Dynamic_referenceContext dynamic_reference() {
		Dynamic_referenceContext _localctx = new Dynamic_referenceContext(Context, State);
		EnterRule(_localctx, 112, RULE_dynamic_reference);
		try {
			int _alt;
			State = 683;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EVENT:
				_localctx = new EventDynamicReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 631; Match(EVENT);
				State = 632; Match(T__5);
				State = 633; Match(IDENTIFIER);
				State = 638;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 634; Match(T__5);
						State = 635; Match(IDENTIFIER);
						}
						} 
					}
					State = 640;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
				}
				}
				break;
			case TRACE:
				_localctx = new TraceDynamicReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 641; Match(TRACE);
				State = 642; Match(T__5);
				State = 643; Match(IDENTIFIER);
				State = 648;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 644; Match(T__5);
						State = 645; Match(IDENTIFIER);
						}
						} 
					}
					State = 650;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
				}
				}
				break;
			case STREAM:
				_localctx = new StreamDynamicReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 651; Match(STREAM);
				State = 652; Match(T__5);
				State = 653; Match(EVENT);
				State = 654; Match(T__5);
				State = 655; Match(IDENTIFIER);
				State = 660;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 656; Match(T__5);
						State = 657; Match(IDENTIFIER);
						}
						} 
					}
					State = 662;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
				}
				}
				break;
			case ENV:
				_localctx = new EnvDynamicReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 663; Match(ENV);
				State = 664; Match(T__5);
				State = 665; Match(IDENTIFIER);
				State = 670;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 666; Match(T__5);
						State = 667; Match(IDENTIFIER);
						}
						} 
					}
					State = 672;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
				}
				}
				break;
			case CLOCK:
				_localctx = new ClockDynamicReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 673; Match(CLOCK);
				State = 674; Match(T__5);
				State = 675; Match(IDENTIFIER);
				State = 680;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 676; Match(T__5);
						State = 677; Match(IDENTIFIER);
						}
						} 
					}
					State = 682;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enumerator_mappingContext : ParserRuleContext {
		public Enumerator_mappingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator_mapping; } }
	 
		public Enumerator_mappingContext() { }
		public virtual void CopyFrom(Enumerator_mappingContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EnumeratorMappingSimpleContext : Enumerator_mappingContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public EnumeratorMappingSimpleContext(Enumerator_mappingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumeratorMappingSimple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumeratorMappingSimple(this);
		}
	}
	public partial class EnumeratorMappingRangeContext : Enumerator_mappingContext {
		public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		public EnumeratorMappingRangeContext(Enumerator_mappingContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterEnumeratorMappingRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitEnumeratorMappingRange(this);
		}
	}

	[RuleVersion(0)]
	public Enumerator_mappingContext enumerator_mapping() {
		Enumerator_mappingContext _localctx = new Enumerator_mappingContext(Context, State);
		EnterRule(_localctx, 114, RULE_enumerator_mapping);
		try {
			State = 690;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				_localctx = new EnumeratorMappingRangeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 685; unary_expression();
				State = 686; Match(T__16);
				State = 687; unary_expression();
				}
				break;
			case 2:
				_localctx = new EnumeratorMappingSimpleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 689; unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_or_variant_declarator_listContext : ParserRuleContext {
		public Struct_or_variant_declaratorContext[] struct_or_variant_declarator() {
			return GetRuleContexts<Struct_or_variant_declaratorContext>();
		}
		public Struct_or_variant_declaratorContext struct_or_variant_declarator(int i) {
			return GetRuleContext<Struct_or_variant_declaratorContext>(i);
		}
		public Struct_or_variant_declarator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_or_variant_declarator_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStruct_or_variant_declarator_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStruct_or_variant_declarator_list(this);
		}
	}

	[RuleVersion(0)]
	public Struct_or_variant_declarator_listContext struct_or_variant_declarator_list() {
		Struct_or_variant_declarator_listContext _localctx = new Struct_or_variant_declarator_listContext(Context, State);
		EnterRule(_localctx, 116, RULE_struct_or_variant_declarator_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 692; struct_or_variant_declarator();
			State = 697;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 693; Match(T__4);
				State = 694; struct_or_variant_declarator();
				}
				}
				State = 699;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_or_variant_declaratorContext : ParserRuleContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Struct_or_variant_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_or_variant_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterStruct_or_variant_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitStruct_or_variant_declarator(this);
		}
	}

	[RuleVersion(0)]
	public Struct_or_variant_declaratorContext struct_or_variant_declarator() {
		Struct_or_variant_declaratorContext _localctx = new Struct_or_variant_declaratorContext(Context, State);
		EnterRule(_localctx, 118, RULE_struct_or_variant_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 700; declarator();
			State = 703;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 701; Match(T__6);
				State = 702; unary_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CtfParser.IDENTIFIER, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.EnterDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICtfListener typedListener = listener as ICtfListener;
			if (typedListener != null) typedListener.ExitDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(Context, State);
		EnterRule(_localctx, 120, RULE_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 705; Match(IDENTIFIER);
			State = 710;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 706; Match(T__11);
				State = 707; unary_expression();
				State = 708; Match(T__12);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 43: return enum_integer_declaration_specifiers_sempred((Enum_integer_declaration_specifiersContext)_localctx, predIndex);
		case 55: return postfix_expression_complex_sempred((Postfix_expression_complexContext)_localctx, predIndex);
		}
		return true;
	}
	private bool enum_integer_declaration_specifiers_sempred(Enum_integer_declaration_specifiersContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool postfix_expression_complex_sempred(Postfix_expression_complexContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ',', '\x2CB', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x3', '\x2', '\x6', '\x2', '~', 
		'\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x7F', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\x93', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x97', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x6', '\t', '\xC5', '\n', '\t', '\r', 
		'\t', '\xE', '\t', '\xC6', '\x5', '\t', '\xC9', '\n', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', '\xD2', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'\xDB', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xE4', '\n', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\xED', '\n', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xF8', '\n', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\x103', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', 
		'\x10', '\x108', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x10B', '\v', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\x110', 
		'\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x113', '\v', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', 
		'\x13', '\x11A', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x11D', '\v', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x6', 
		'\x15', '\x128', '\n', '\x15', '\r', '\x15', '\xE', '\x15', '\x129', '\x3', 
		'\x16', '\x3', '\x16', '\x6', '\x16', '\x12E', '\n', '\x16', '\r', '\x16', 
		'\xE', '\x16', '\x12F', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', 
		'\x17', '\x135', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', 
		'\x6', '\x18', '\x13A', '\n', '\x18', '\r', '\x18', '\xE', '\x18', '\x13B', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x16E', '\n', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x18C', 
		'\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x1A9', '\n', 
		'\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x5', '(', '\x1D2', '\n', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\a', '(', '\x1D8', '\n', '(', '\f', '(', '\xE', '(', '\x1DB', '\v', 
		'(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x5', 
		')', '\x1E2', '\n', ')', '\x3', ')', '\x3', ')', '\x5', ')', '\x1E6', 
		'\n', ')', '\x3', ')', '\a', ')', '\x1E9', '\n', ')', '\f', ')', '\xE', 
		')', '\x1EC', '\v', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x5', '*', '\x1F2', '\n', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x1F6', 
		'\n', '*', '\x3', '*', '\a', '*', '\x1F9', '\n', '*', '\f', '*', '\xE', 
		'*', '\x1FC', '\v', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x5', '+', 
		'\x20D', '\n', '+', '\x3', ',', '\x3', ',', '\x3', ',', '\a', ',', '\x212', 
		'\n', ',', '\f', ',', '\xE', ',', '\x215', '\v', ',', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\a', '-', '\x21C', '\n', '-', 
		'\f', '-', '\xE', '-', '\x21F', '\v', '-', '\x3', '.', '\x3', '.', '\x3', 
		'/', '\x3', '/', '\x3', '\x30', '\a', '\x30', '\x226', '\n', '\x30', '\f', 
		'\x30', '\xE', '\x30', '\x229', '\v', '\x30', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x234', '\n', '\x33', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x243', '\n', '\x34', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', 
		'\x24E', '\n', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x5', '\x36', '\x25A', '\n', '\x36', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x25F', '\n', '\x37', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x265', 
		'\n', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x26E', '\n', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\a', '\x39', '\x275', '\n', '\x39', '\f', '\x39', '\xE', '\x39', 
		'\x278', '\v', '\x39', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\x3', ':', '\a', ':', '\x27F', '\n', ':', '\f', ':', '\xE', ':', '\x282', 
		'\v', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\a', ':', '\x289', '\n', ':', '\f', ':', '\xE', ':', '\x28C', '\v', ':', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\x3', ':', '\a', ':', '\x295', '\n', ':', '\f', ':', '\xE', ':', '\x298', 
		'\v', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\a', ':', '\x29F', '\n', ':', '\f', ':', '\xE', ':', '\x2A2', '\v', ':', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\a', ':', 
		'\x2A9', '\n', ':', '\f', ':', '\xE', ':', '\x2AC', '\v', ':', '\x5', 
		':', '\x2AE', '\n', ':', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x5', ';', '\x2B5', '\n', ';', '\x3', '<', '\x3', '<', '\x3', 
		'<', '\a', '<', '\x2BA', '\n', '<', '\f', '<', '\xE', '<', '\x2BD', '\v', 
		'<', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', '\x2C2', '\n', '=', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x5', '>', 
		'\x2C9', '\n', '>', '\x3', '>', '\x2', '\x4', 'X', 'p', '?', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', 
		'\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 
		'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', 
		'\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '\x2', 
		'\x3', '\x4', '\x2', '\x14', '\x1F', '!', '\"', '\x2', '\x2F1', '\x2', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x4', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x92', '\x3', '\x2', '\x2', '\x2', '\b', '\x96', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x98', '\x3', '\x2', '\x2', '\x2', '\f', '\x9E', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\xC8', '\x3', '\x2', '\x2', '\x2', '\x12', '\xD1', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\xDA', '\x3', '\x2', '\x2', '\x2', '\x16', '\xE3', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\xEC', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\xF7', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x102', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x104', '\x3', '\x2', '\x2', '\x2', ' ', '\x10C', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x114', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x116', '\x3', '\x2', '\x2', '\x2', '&', '\x11E', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x127', '\x3', '\x2', '\x2', '\x2', '*', '\x12D', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x134', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x139', '\x3', '\x2', '\x2', '\x2', '\x30', '\x16D', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x34', '\x1A8', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x1AA', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x1AD', '\x3', '\x2', '\x2', '\x2', ':', '\x1B0', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x1B3', '\x3', '\x2', '\x2', '\x2', '>', '\x1B6', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x1B9', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1BF', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x1C2', '\x3', '\x2', '\x2', '\x2', 'H', '\x1C4', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x1C7', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x1C9', '\x3', '\x2', '\x2', '\x2', 'N', '\x1D1', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x1E1', '\x3', '\x2', '\x2', '\x2', 'R', '\x1F1', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x20C', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x20E', '\x3', '\x2', '\x2', '\x2', 'X', '\x216', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x220', '\x3', '\x2', '\x2', '\x2', '\\', '\x222', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x227', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x22A', '\x3', '\x2', '\x2', '\x2', '\x62', '\x22C', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x233', '\x3', '\x2', '\x2', '\x2', '\x66', '\x242', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x24D', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x259', '\x3', '\x2', '\x2', '\x2', 'l', '\x25E', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x264', '\x3', '\x2', '\x2', '\x2', 'p', '\x26D', 
		'\x3', '\x2', '\x2', '\x2', 'r', '\x2AD', '\x3', '\x2', '\x2', '\x2', 
		't', '\x2B4', '\x3', '\x2', '\x2', '\x2', 'v', '\x2B6', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x2BE', '\x3', '\x2', '\x2', '\x2', 'z', '\x2C3', 
		'\x3', '\x2', '\x2', '\x2', '|', '~', '\x5', '\x6', '\x4', '\x2', '}', 
		'|', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x3', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', 
		'\t', '\x2', '\x2', '\x2', '\x82', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x83', '\x84', '\x5', '\xE', '\b', '\x2', '\x84', '\x85', '\a', '\x3', 
		'\x2', '\x2', '\x85', '\x93', '\x3', '\x2', '\x2', '\x2', '\x86', '\x93', 
		'\x5', '\x12', '\n', '\x2', '\x87', '\x93', '\x5', '\x14', '\v', '\x2', 
		'\x88', '\x93', '\x5', '\x16', '\f', '\x2', '\x89', '\x93', '\x5', '\x18', 
		'\r', '\x2', '\x8A', '\x93', '\x5', '\x1A', '\xE', '\x2', '\x8B', '\x93', 
		'\x5', '\x1C', '\xF', '\x2', '\x8C', '\x8D', '\x5', '\f', '\a', '\x2', 
		'\x8D', '\x8E', '\a', '\x3', '\x2', '\x2', '\x8E', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', '\x90', '\x5', '\n', '\x6', '\x2', '\x90', '\x91', 
		'\a', '\x3', '\x2', '\x2', '\x91', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x83', '\x3', '\x2', '\x2', '\x2', '\x92', '\x86', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x87', '\x3', '\x2', '\x2', '\x2', '\x92', '\x88', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x92', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x92', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x93', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x97', '\x5', '\"', '\x12', '\x2', '\x95', '\x97', '\x5', '$', 
		'\x13', '\x2', '\x96', '\x94', '\x3', '\x2', '\x2', '\x2', '\x96', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x97', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x99', '\a', ' ', '\x2', '\x2', '\x99', '\x9A', '\x5', '\xE', 
		'\b', '\x2', '\x9A', '\x9B', '\x5', ' ', '\x11', '\x2', '\x9B', '\x9C', 
		'\a', '\x4', '\x2', '\x2', '\x9C', '\x9D', '\x5', '\b', '\x5', '\x2', 
		'\x9D', '\v', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\a', '!', '\x2', 
		'\x2', '\x9F', '\xA0', '\x5', '\xE', '\b', '\x2', '\xA0', '\xA1', '\x5', 
		'\x1E', '\x10', '\x2', '\xA1', '\r', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\xA3', '\x5', '\x10', '\t', '\x2', '\xA3', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA5', '\a', '\x1A', '\x2', '\x2', '\xA5', '\xA6', '\a', 
		'\x5', '\x2', '\x2', '\xA6', '\xC9', '\a', '\x6', '\x2', '\x2', '\xA7', 
		'\xA8', '\a', '\x1A', '\x2', '\x2', '\xA8', '\xA9', '\a', '\x5', '\x2', 
		'\x2', '\xA9', '\xAA', '\x5', '.', '\x18', '\x2', '\xAA', '\xAB', '\a', 
		'\x6', '\x2', '\x2', '\xAB', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAD', '\a', '\x1B', '\x2', '\x2', '\xAD', '\xAE', '\a', '\x5', '\x2', 
		'\x2', '\xAE', '\xC9', '\a', '\x6', '\x2', '\x2', '\xAF', '\xB0', '\a', 
		'\x1B', '\x2', '\x2', '\xB0', '\xB1', '\a', '\x5', '\x2', '\x2', '\xB1', 
		'\xB2', '\x5', '.', '\x18', '\x2', '\xB2', '\xB3', '\a', '\x6', '\x2', 
		'\x2', '\xB3', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xC9', '\a', 
		'\x1D', '\x2', '\x2', '\xB5', '\xB6', '\a', '\x1D', '\x2', '\x2', '\xB6', 
		'\xB7', '\a', '\x5', '\x2', '\x2', '\xB7', '\xC9', '\a', '\x6', '\x2', 
		'\x2', '\xB8', '\xB9', '\a', '\x1D', '\x2', '\x2', '\xB9', '\xBA', '\a', 
		'\x5', '\x2', '\x2', '\xBA', '\xBB', '\x5', '.', '\x18', '\x2', '\xBB', 
		'\xBC', '\a', '\x6', '\x2', '\x2', '\xBC', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\xBE', '\a', '\x17', '\x2', '\x2', '\xBE', '\xC9', '\x5', 
		'\x30', '\x19', '\x2', '\xBF', '\xC0', '\a', '\"', '\x2', '\x2', '\xC0', 
		'\xC9', '\x5', '\x32', '\x1A', '\x2', '\xC1', '\xC2', '\a', '\x1E', '\x2', 
		'\x2', '\xC2', '\xC9', '\x5', '\x34', '\x1B', '\x2', '\xC3', '\xC5', '\a', 
		'&', '\x2', '\x2', '\xC4', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC5', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xBD', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x5', '\x36', '\x1C', 
		'\x2', '\xCB', '\xCC', '\x5', '\x38', '\x1D', '\x2', '\xCC', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xCD', '\xCE', '\x5', '\x36', '\x1C', '\x2', '\xCE', 
		'\xCF', '\x5', '.', '\x18', '\x2', '\xCF', '\xD0', '\x5', '\x38', '\x1D', 
		'\x2', '\xD0', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\x5', ':', '\x1E', 
		'\x2', '\xD4', '\xD5', '\x5', '<', '\x1F', '\x2', '\xD5', '\xDB', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD7', '\x5', ':', '\x1E', '\x2', '\xD7', 
		'\xD8', '\x5', '*', '\x16', '\x2', '\xD8', '\xD9', '\x5', '<', '\x1F', 
		'\x2', '\xD9', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\x5', '>', ' ', '\x2', 
		'\xDD', '\xDE', '\x5', '@', '!', '\x2', '\xDE', '\xE4', '\x3', '\x2', 
		'\x2', '\x2', '\xDF', '\xE0', '\x5', '>', ' ', '\x2', '\xE0', '\xE1', 
		'\x5', '.', '\x18', '\x2', '\xE1', '\xE2', '\x5', '@', '!', '\x2', '\xE2', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xDC', '\x3', '\x2', '\x2', 
		'\x2', '\xE3', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE4', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\xE5', '\xE6', '\x5', '\x42', '\"', '\x2', '\xE6', 
		'\xE7', '\x5', '\x44', '#', '\x2', '\xE7', '\xED', '\x3', '\x2', '\x2', 
		'\x2', '\xE8', '\xE9', '\x5', '\x42', '\"', '\x2', '\xE9', '\xEA', '\x5', 
		'(', '\x15', '\x2', '\xEA', '\xEB', '\x5', '\x44', '#', '\x2', '\xEB', 
		'\xED', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xE5', '\x3', '\x2', '\x2', 
		'\x2', '\xEC', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xED', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xEE', '\xEF', '\a', '\x16', '\x2', '\x2', '\xEF', 
		'\xF0', '\x5', '\x46', '$', '\x2', '\xF0', '\xF1', '\x5', 'H', '%', '\x2', 
		'\xF1', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\a', '\x16', 
		'\x2', '\x2', '\xF3', '\xF4', '\x5', '\x46', '$', '\x2', '\xF4', '\xF5', 
		'\x5', '.', '\x18', '\x2', '\xF5', '\xF6', '\x5', 'H', '%', '\x2', '\xF6', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF8', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xF9', '\xFA', '\a', '\x15', '\x2', '\x2', '\xFA', 
		'\xFB', '\x5', 'J', '&', '\x2', '\xFB', '\xFC', '\x5', 'L', '\'', '\x2', 
		'\xFC', '\x103', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFE', '\a', '\x15', 
		'\x2', '\x2', '\xFE', '\xFF', '\x5', 'J', '&', '\x2', '\xFF', '\x100', 
		'\x5', '.', '\x18', '\x2', '\x100', '\x101', '\x5', 'L', '\'', '\x2', 
		'\x101', '\x103', '\x3', '\x2', '\x2', '\x2', '\x102', '\xF9', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x103', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x104', '\x109', '\x5', 'N', '(', 
		'\x2', '\x105', '\x106', '\a', '\a', '\x2', '\x2', '\x106', '\x108', '\x5', 
		'N', '(', '\x2', '\x107', '\x105', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\x10B', '\x3', '\x2', '\x2', '\x2', '\x109', '\x107', '\x3', '\x2', '\x2', 
		'\x2', '\x109', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x10B', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\x10C', '\x111', '\x5', 'P', ')', '\x2', '\x10D', '\x10E', '\a', '\a', 
		'\x2', '\x2', '\x10E', '\x110', '\x5', 'P', ')', '\x2', '\x10F', '\x10D', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '\x113', '\x3', '\x2', '\x2', '\x2', 
		'\x111', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x3', 
		'\x2', '\x2', '\x2', '\x112', '!', '\x3', '\x2', '\x2', '\x2', '\x113', 
		'\x111', '\x3', '\x2', '\x2', '\x2', '\x114', '\x115', '\x5', '\x10', 
		'\t', '\x2', '\x115', '#', '\x3', '\x2', '\x2', '\x2', '\x116', '\x11B', 
		'\x5', 'R', '*', '\x2', '\x117', '\x118', '\a', '\a', '\x2', '\x2', '\x118', 
		'\x11A', '\x5', 'R', '*', '\x2', '\x119', '\x117', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '%', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11B', '\x3', '\x2', 
		'\x2', '\x2', '\x11E', '\x11F', '\a', '&', '\x2', '\x2', '\x11F', '\x120', 
		'\a', '\b', '\x2', '\x2', '\x120', '\x121', '\a', '&', '\x2', '\x2', '\x121', 
		'\x122', '\a', '\x4', '\x2', '\x2', '\x122', '\x123', '\x5', '\xE', '\b', 
		'\x2', '\x123', '\x124', '\a', '\x3', '\x2', '\x2', '\x124', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x125', '\x128', '\x5', ',', '\x17', '\x2', '\x126', 
		'\x128', '\x5', '&', '\x14', '\x2', '\x127', '\x125', '\x3', '\x2', '\x2', 
		'\x2', '\x127', '\x126', '\x3', '\x2', '\x2', '\x2', '\x128', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x129', '\x127', '\x3', '\x2', '\x2', '\x2', 
		'\x129', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12A', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x12B', '\x12E', '\x5', ',', '\x17', '\x2', '\x12C', '\x12E', 
		'\x5', '&', '\x14', '\x2', '\x12D', '\x12B', '\x3', '\x2', '\x2', '\x2', 
		'\x12D', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12F', '\x3', 
		'\x2', '\x2', '\x2', '\x12F', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12F', 
		'\x130', '\x3', '\x2', '\x2', '\x2', '\x130', '+', '\x3', '\x2', '\x2', 
		'\x2', '\x131', '\x135', '\x5', 'T', '+', '\x2', '\x132', '\x135', '\x5', 
		'\f', '\a', '\x2', '\x133', '\x135', '\x5', '\n', '\x6', '\x2', '\x134', 
		'\x131', '\x3', '\x2', '\x2', '\x2', '\x134', '\x132', '\x3', '\x2', '\x2', 
		'\x2', '\x134', '\x133', '\x3', '\x2', '\x2', '\x2', '\x135', '\x136', 
		'\x3', '\x2', '\x2', '\x2', '\x136', '\x137', '\a', '\x3', '\x2', '\x2', 
		'\x137', '-', '\x3', '\x2', '\x2', '\x2', '\x138', '\x13A', '\x5', ',', 
		'\x17', '\x2', '\x139', '\x138', '\x3', '\x2', '\x2', '\x2', '\x13A', 
		'\x13B', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x139', '\x3', '\x2', '\x2', 
		'\x2', '\x13B', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13C', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x13D', '\x13E', '\a', '\x5', '\x2', '\x2', '\x13E', 
		'\x13F', '\x5', 'V', ',', '\x2', '\x13F', '\x140', '\a', '\x6', '\x2', 
		'\x2', '\x140', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x141', '\x142', 
		'\a', '\x5', '\x2', '\x2', '\x142', '\x143', '\x5', 'V', ',', '\x2', '\x143', 
		'\x144', '\a', '\a', '\x2', '\x2', '\x144', '\x145', '\a', '\x6', '\x2', 
		'\x2', '\x145', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x146', '\x147', 
		'\a', '\t', '\x2', '\x2', '\x147', '\x148', '\x5', 'X', '-', '\x2', '\x148', 
		'\x149', '\a', '\x5', '\x2', '\x2', '\x149', '\x14A', '\x5', 'V', ',', 
		'\x2', '\x14A', '\x14B', '\a', '\x6', '\x2', '\x2', '\x14B', '\x16E', 
		'\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', '\a', '\t', '\x2', '\x2', 
		'\x14D', '\x14E', '\x5', 'X', '-', '\x2', '\x14E', '\x14F', '\a', '\x5', 
		'\x2', '\x2', '\x14F', '\x150', '\x5', 'V', ',', '\x2', '\x150', '\x151', 
		'\a', '\a', '\x2', '\x2', '\x151', '\x152', '\a', '\x6', '\x2', '\x2', 
		'\x152', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x153', '\x154', '\a', 
		'&', '\x2', '\x2', '\x154', '\x155', '\a', '\x5', '\x2', '\x2', '\x155', 
		'\x156', '\x5', 'V', ',', '\x2', '\x156', '\x157', '\a', '\x6', '\x2', 
		'\x2', '\x157', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x158', '\x159', 
		'\a', '&', '\x2', '\x2', '\x159', '\x15A', '\a', '\x5', '\x2', '\x2', 
		'\x15A', '\x15B', '\x5', 'V', ',', '\x2', '\x15B', '\x15C', '\a', '\a', 
		'\x2', '\x2', '\x15C', '\x15D', '\a', '\x6', '\x2', '\x2', '\x15D', '\x16E', 
		'\x3', '\x2', '\x2', '\x2', '\x15E', '\x15F', '\a', '&', '\x2', '\x2', 
		'\x15F', '\x160', '\a', '\t', '\x2', '\x2', '\x160', '\x161', '\x5', 'X', 
		'-', '\x2', '\x161', '\x162', '\a', '\x5', '\x2', '\x2', '\x162', '\x163', 
		'\x5', 'V', ',', '\x2', '\x163', '\x164', '\a', '\x6', '\x2', '\x2', '\x164', 
		'\x16E', '\x3', '\x2', '\x2', '\x2', '\x165', '\x166', '\a', '&', '\x2', 
		'\x2', '\x166', '\x167', '\a', '\t', '\x2', '\x2', '\x167', '\x168', '\x5', 
		'X', '-', '\x2', '\x168', '\x169', '\a', '\x5', '\x2', '\x2', '\x169', 
		'\x16A', '\x5', 'V', ',', '\x2', '\x16A', '\x16B', '\a', '\a', '\x2', 
		'\x2', '\x16B', '\x16C', '\a', '\x6', '\x2', '\x2', '\x16C', '\x16E', 
		'\x3', '\x2', '\x2', '\x2', '\x16D', '\x13D', '\x3', '\x2', '\x2', '\x2', 
		'\x16D', '\x141', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x146', '\x3', 
		'\x2', '\x2', '\x2', '\x16D', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x16D', 
		'\x153', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x158', '\x3', '\x2', '\x2', 
		'\x2', '\x16D', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x165', 
		'\x3', '\x2', '\x2', '\x2', '\x16E', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x16F', '\x170', '\x5', 'Z', '.', '\x2', '\x170', '\x171', '\x5', '^', 
		'\x30', '\x2', '\x171', '\x172', '\x5', '\\', '/', '\x2', '\x172', '\x18C', 
		'\x3', '\x2', '\x2', '\x2', '\x173', '\x174', '\a', '\n', '\x2', '\x2', 
		'\x174', '\x175', '\a', '&', '\x2', '\x2', '\x175', '\x176', '\a', '\v', 
		'\x2', '\x2', '\x176', '\x177', '\x5', 'Z', '.', '\x2', '\x177', '\x178', 
		'\x5', '^', '\x30', '\x2', '\x178', '\x179', '\x5', '\\', '/', '\x2', 
		'\x179', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x17B', '\a', 
		'&', '\x2', '\x2', '\x17B', '\x17C', '\x5', 'Z', '.', '\x2', '\x17C', 
		'\x17D', '\x5', '^', '\x30', '\x2', '\x17D', '\x17E', '\x5', '\\', '/', 
		'\x2', '\x17E', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', 
		'\a', '&', '\x2', '\x2', '\x180', '\x181', '\a', '\n', '\x2', '\x2', '\x181', 
		'\x182', '\a', '&', '\x2', '\x2', '\x182', '\x183', '\a', '\v', '\x2', 
		'\x2', '\x183', '\x184', '\x5', 'Z', '.', '\x2', '\x184', '\x185', '\x5', 
		'^', '\x30', '\x2', '\x185', '\x186', '\x5', '\\', '/', '\x2', '\x186', 
		'\x18C', '\x3', '\x2', '\x2', '\x2', '\x187', '\x188', '\a', '&', '\x2', 
		'\x2', '\x188', '\x189', '\a', '\n', '\x2', '\x2', '\x189', '\x18A', '\a', 
		'&', '\x2', '\x2', '\x18A', '\x18C', '\a', '\v', '\x2', '\x2', '\x18B', 
		'\x16F', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x173', '\x3', '\x2', '\x2', 
		'\x2', '\x18B', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x17F', 
		'\x3', '\x2', '\x2', '\x2', '\x18B', '\x187', '\x3', '\x2', '\x2', '\x2', 
		'\x18C', '\x33', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18E', '\x5', 
		'`', '\x31', '\x2', '\x18E', '\x18F', '\x5', '^', '\x30', '\x2', '\x18F', 
		'\x190', '\x5', '\x62', '\x32', '\x2', '\x190', '\x1A9', '\x3', '\x2', 
		'\x2', '\x2', '\x191', '\x192', '\a', '&', '\x2', '\x2', '\x192', '\x193', 
		'\x5', '`', '\x31', '\x2', '\x193', '\x194', '\x5', '^', '\x30', '\x2', 
		'\x194', '\x195', '\x5', '\x62', '\x32', '\x2', '\x195', '\x1A9', '\x3', 
		'\x2', '\x2', '\x2', '\x196', '\x1A9', '\a', '&', '\x2', '\x2', '\x197', 
		'\x198', '\x5', '`', '\x31', '\x2', '\x198', '\x199', '\x5', '^', '\x30', 
		'\x2', '\x199', '\x19A', '\x5', '\x62', '\x32', '\x2', '\x19A', '\x19B', 
		'\a', '\x14', '\x2', '\x2', '\x19B', '\x19C', '\a', '\f', '\x2', '\x2', 
		'\x19C', '\x19D', '\x5', '\x64', '\x33', '\x2', '\x19D', '\x19E', '\a', 
		'\r', '\x2', '\x2', '\x19E', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x19F', 
		'\x1A0', '\a', '&', '\x2', '\x2', '\x1A0', '\x1A1', '\x5', '`', '\x31', 
		'\x2', '\x1A1', '\x1A2', '\x5', '^', '\x30', '\x2', '\x1A2', '\x1A3', 
		'\x5', '\x62', '\x32', '\x2', '\x1A3', '\x1A4', '\a', '\x14', '\x2', '\x2', 
		'\x1A4', '\x1A5', '\a', '\f', '\x2', '\x2', '\x1A5', '\x1A6', '\x5', '\x64', 
		'\x33', '\x2', '\x1A6', '\x1A7', '\a', '\r', '\x2', '\x2', '\x1A7', '\x1A9', 
		'\x3', '\x2', '\x2', '\x2', '\x1A8', '\x18D', '\x3', '\x2', '\x2', '\x2', 
		'\x1A8', '\x191', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x196', '\x3', 
		'\x2', '\x2', '\x2', '\x1A8', '\x197', '\x3', '\x2', '\x2', '\x2', '\x1A8', 
		'\x19F', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x1AA', '\x1AB', '\a', '\x19', '\x2', '\x2', '\x1AB', '\x1AC', 
		'\a', '\x5', '\x2', '\x2', '\x1AC', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x1AD', '\x1AE', '\a', '\x6', '\x2', '\x2', '\x1AE', '\x1AF', '\a', '\x3', 
		'\x2', '\x2', '\x1AF', '\x39', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B1', 
		'\a', '\x1C', '\x2', '\x2', '\x1B1', '\x1B2', '\a', '\x5', '\x2', '\x2', 
		'\x1B2', ';', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B4', '\a', '\x6', 
		'\x2', '\x2', '\x1B4', '\x1B5', '\a', '\x3', '\x2', '\x2', '\x1B5', '=', 
		'\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B7', '\a', '\x18', '\x2', '\x2', 
		'\x1B7', '\x1B8', '\a', '\x5', '\x2', '\x2', '\x1B8', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x1B9', '\x1BA', '\a', '\x6', '\x2', '\x2', '\x1BA', '\x1BB', 
		'\a', '\x3', '\x2', '\x2', '\x1BB', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x1BC', '\x1BD', '\a', '\x1F', '\x2', '\x2', '\x1BD', '\x1BE', '\a', 
		'\x5', '\x2', '\x2', '\x1BE', '\x43', '\x3', '\x2', '\x2', '\x2', '\x1BF', 
		'\x1C0', '\a', '\x6', '\x2', '\x2', '\x1C0', '\x1C1', '\a', '\x3', '\x2', 
		'\x2', '\x1C1', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C3', 
		'\a', '\x5', '\x2', '\x2', '\x1C3', 'G', '\x3', '\x2', '\x2', '\x2', '\x1C4', 
		'\x1C5', '\a', '\x6', '\x2', '\x2', '\x1C5', '\x1C6', '\a', '\x3', '\x2', 
		'\x2', '\x1C6', 'I', '\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1C8', '\a', 
		'\x5', '\x2', '\x2', '\x1C8', 'K', '\x3', '\x2', '\x2', '\x2', '\x1C9', 
		'\x1CA', '\a', '\x6', '\x2', '\x2', '\x1CA', '\x1CB', '\a', '\x3', '\x2', 
		'\x2', '\x1CB', 'M', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1D2', '\a', 
		'&', '\x2', '\x2', '\x1CD', '\x1CE', '\a', '\f', '\x2', '\x2', '\x1CE', 
		'\x1CF', '\x5', 'N', '(', '\x2', '\x1CF', '\x1D0', '\a', '\r', '\x2', 
		'\x2', '\x1D0', '\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1CC', 
		'\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1CD', '\x3', '\x2', '\x2', '\x2', 
		'\x1D1', '\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D9', '\x3', 
		'\x2', '\x2', '\x2', '\x1D3', '\x1D4', '\a', '\xE', '\x2', '\x2', '\x1D4', 
		'\x1D5', '\x5', '\x64', '\x33', '\x2', '\x1D5', '\x1D6', '\a', '\xF', 
		'\x2', '\x2', '\x1D6', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D3', 
		'\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1DB', '\x3', '\x2', '\x2', '\x2', 
		'\x1D9', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DA', '\x3', 
		'\x2', '\x2', '\x2', '\x1DA', 'O', '\x3', '\x2', '\x2', '\x2', '\x1DB', 
		'\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1E2', '\a', '&', '\x2', 
		'\x2', '\x1DD', '\x1DE', '\a', '\f', '\x2', '\x2', '\x1DE', '\x1DF', '\x5', 
		'P', ')', '\x2', '\x1DF', '\x1E0', '\a', '\r', '\x2', '\x2', '\x1E0', 
		'\x1E2', '\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1DC', '\x3', '\x2', '\x2', 
		'\x2', '\x1E1', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1E2', 
		'\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1EA', '\x3', '\x2', '\x2', '\x2', 
		'\x1E3', '\x1E5', '\a', '\xE', '\x2', '\x2', '\x1E4', '\x1E6', '\x5', 
		'\x64', '\x33', '\x2', '\x1E5', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E5', 
		'\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E7', '\x3', '\x2', '\x2', 
		'\x2', '\x1E7', '\x1E9', '\a', '\xF', '\x2', '\x2', '\x1E8', '\x1E3', 
		'\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1EC', '\x3', '\x2', '\x2', '\x2', 
		'\x1EA', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1EB', '\x3', 
		'\x2', '\x2', '\x2', '\x1EB', 'Q', '\x3', '\x2', '\x2', '\x2', '\x1EC', 
		'\x1EA', '\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1EE', '\a', '\f', '\x2', 
		'\x2', '\x1EE', '\x1EF', '\x5', 'R', '*', '\x2', '\x1EF', '\x1F0', '\a', 
		'\r', '\x2', '\x2', '\x1F0', '\x1F2', '\x3', '\x2', '\x2', '\x2', '\x1F1', 
		'\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1F2', '\x3', '\x2', '\x2', 
		'\x2', '\x1F2', '\x1FA', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F5', 
		'\a', '\xE', '\x2', '\x2', '\x1F4', '\x1F6', '\x5', '\x64', '\x33', '\x2', 
		'\x1F5', '\x1F4', '\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F6', '\x3', 
		'\x2', '\x2', '\x2', '\x1F6', '\x1F7', '\x3', '\x2', '\x2', '\x2', '\x1F7', 
		'\x1F9', '\a', '\xF', '\x2', '\x2', '\x1F8', '\x1F3', '\x3', '\x2', '\x2', 
		'\x2', '\x1F9', '\x1FC', '\x3', '\x2', '\x2', '\x2', '\x1FA', '\x1F8', 
		'\x3', '\x2', '\x2', '\x2', '\x1FA', '\x1FB', '\x3', '\x2', '\x2', '\x2', 
		'\x1FB', 'S', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\x1FA', '\x3', '\x2', 
		'\x2', '\x2', '\x1FD', '\x1FE', '\a', '&', '\x2', '\x2', '\x1FE', '\x1FF', 
		'\a', '\x10', '\x2', '\x2', '\x1FF', '\x20D', '\x5', '\x64', '\x33', '\x2', 
		'\x200', '\x201', '\x5', 'r', ':', '\x2', '\x201', '\x202', '\a', '\x10', 
		'\x2', '\x2', '\x202', '\x203', '\x5', '\x64', '\x33', '\x2', '\x203', 
		'\x20D', '\x3', '\x2', '\x2', '\x2', '\x204', '\x205', '\x5', '\x4', '\x3', 
		'\x2', '\x205', '\x206', '\a', '\x10', '\x2', '\x2', '\x206', '\x207', 
		'\x5', '\x64', '\x33', '\x2', '\x207', '\x20D', '\x3', '\x2', '\x2', '\x2', 
		'\x208', '\x209', '\x5', '\x64', '\x33', '\x2', '\x209', '\x20A', '\a', 
		'\x4', '\x2', '\x2', '\x20A', '\x20B', '\x5', '\xE', '\b', '\x2', '\x20B', 
		'\x20D', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x1FD', '\x3', '\x2', '\x2', 
		'\x2', '\x20C', '\x200', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x204', 
		'\x3', '\x2', '\x2', '\x2', '\x20C', '\x208', '\x3', '\x2', '\x2', '\x2', 
		'\x20D', 'U', '\x3', '\x2', '\x2', '\x2', '\x20E', '\x213', '\x5', '\x66', 
		'\x34', '\x2', '\x20F', '\x210', '\a', '\a', '\x2', '\x2', '\x210', '\x212', 
		'\x5', '\x66', '\x34', '\x2', '\x211', '\x20F', '\x3', '\x2', '\x2', '\x2', 
		'\x212', '\x215', '\x3', '\x2', '\x2', '\x2', '\x213', '\x211', '\x3', 
		'\x2', '\x2', '\x2', '\x213', '\x214', '\x3', '\x2', '\x2', '\x2', '\x214', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x215', '\x213', '\x3', '\x2', '\x2', 
		'\x2', '\x216', '\x217', '\b', '-', '\x1', '\x2', '\x217', '\x218', '\x5', 
		'h', '\x35', '\x2', '\x218', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x219', 
		'\x21A', '\f', '\x3', '\x2', '\x2', '\x21A', '\x21C', '\x5', 'h', '\x35', 
		'\x2', '\x21B', '\x219', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x21F', 
		'\x3', '\x2', '\x2', '\x2', '\x21D', '\x21B', '\x3', '\x2', '\x2', '\x2', 
		'\x21D', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x21E', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '\x21F', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x220', '\x221', 
		'\a', '\x5', '\x2', '\x2', '\x221', '[', '\x3', '\x2', '\x2', '\x2', '\x222', 
		'\x223', '\a', '\x6', '\x2', '\x2', '\x223', ']', '\x3', '\x2', '\x2', 
		'\x2', '\x224', '\x226', '\x5', 'j', '\x36', '\x2', '\x225', '\x224', 
		'\x3', '\x2', '\x2', '\x2', '\x226', '\x229', '\x3', '\x2', '\x2', '\x2', 
		'\x227', '\x225', '\x3', '\x2', '\x2', '\x2', '\x227', '\x228', '\x3', 
		'\x2', '\x2', '\x2', '\x228', '_', '\x3', '\x2', '\x2', '\x2', '\x229', 
		'\x227', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x22B', '\a', '\x5', '\x2', 
		'\x2', '\x22B', '\x61', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x22D', 
		'\a', '\x6', '\x2', '\x2', '\x22D', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x22E', '\x234', '\x5', 'n', '\x38', '\x2', '\x22F', '\x230', '\a', '\x11', 
		'\x2', '\x2', '\x230', '\x234', '\x5', '\x64', '\x33', '\x2', '\x231', 
		'\x232', '\a', '\x12', '\x2', '\x2', '\x232', '\x234', '\x5', '\x64', 
		'\x33', '\x2', '\x233', '\x22E', '\x3', '\x2', '\x2', '\x2', '\x233', 
		'\x22F', '\x3', '\x2', '\x2', '\x2', '\x233', '\x231', '\x3', '\x2', '\x2', 
		'\x2', '\x234', '\x65', '\x3', '\x2', '\x2', '\x2', '\x235', '\x243', 
		'\a', '&', '\x2', '\x2', '\x236', '\x243', '\x5', '\x4', '\x3', '\x2', 
		'\x237', '\x243', '\a', '*', '\x2', '\x2', '\x238', '\x239', '\a', '&', 
		'\x2', '\x2', '\x239', '\x23A', '\a', '\x10', '\x2', '\x2', '\x23A', '\x243', 
		'\x5', 't', ';', '\x2', '\x23B', '\x23C', '\x5', '\x4', '\x3', '\x2', 
		'\x23C', '\x23D', '\a', '\x10', '\x2', '\x2', '\x23D', '\x23E', '\x5', 
		't', ';', '\x2', '\x23E', '\x243', '\x3', '\x2', '\x2', '\x2', '\x23F', 
		'\x240', '\a', '*', '\x2', '\x2', '\x240', '\x241', '\a', '\x10', '\x2', 
		'\x2', '\x241', '\x243', '\x5', 't', ';', '\x2', '\x242', '\x235', '\x3', 
		'\x2', '\x2', '\x2', '\x242', '\x236', '\x3', '\x2', '\x2', '\x2', '\x242', 
		'\x237', '\x3', '\x2', '\x2', '\x2', '\x242', '\x238', '\x3', '\x2', '\x2', 
		'\x2', '\x242', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x242', '\x23F', 
		'\x3', '\x2', '\x2', '\x2', '\x243', 'g', '\x3', '\x2', '\x2', '\x2', 
		'\x244', '\x24E', '\a', '&', '\x2', '\x2', '\x245', '\x246', '\a', '\x1B', 
		'\x2', '\x2', '\x246', '\x247', '\a', '\x5', '\x2', '\x2', '\x247', '\x24E', 
		'\a', '\x6', '\x2', '\x2', '\x248', '\x249', '\a', '\x1B', '\x2', '\x2', 
		'\x249', '\x24A', '\a', '\x5', '\x2', '\x2', '\x24A', '\x24B', '\x5', 
		'.', '\x18', '\x2', '\x24B', '\x24C', '\a', '\x6', '\x2', '\x2', '\x24C', 
		'\x24E', '\x3', '\x2', '\x2', '\x2', '\x24D', '\x244', '\x3', '\x2', '\x2', 
		'\x2', '\x24D', '\x245', '\x3', '\x2', '\x2', '\x2', '\x24D', '\x248', 
		'\x3', '\x2', '\x2', '\x2', '\x24E', 'i', '\x3', '\x2', '\x2', '\x2', 
		'\x24F', '\x250', '\x5', '\xE', '\b', '\x2', '\x250', '\x251', '\x5', 
		'v', '<', '\x2', '\x251', '\x252', '\a', '\x3', '\x2', '\x2', '\x252', 
		'\x25A', '\x3', '\x2', '\x2', '\x2', '\x253', '\x254', '\x5', '\f', '\a', 
		'\x2', '\x254', '\x255', '\a', '\x3', '\x2', '\x2', '\x255', '\x25A', 
		'\x3', '\x2', '\x2', '\x2', '\x256', '\x257', '\x5', '\n', '\x6', '\x2', 
		'\x257', '\x258', '\a', '\x3', '\x2', '\x2', '\x258', '\x25A', '\x3', 
		'\x2', '\x2', '\x2', '\x259', '\x24F', '\x3', '\x2', '\x2', '\x2', '\x259', 
		'\x253', '\x3', '\x2', '\x2', '\x2', '\x259', '\x256', '\x3', '\x2', '\x2', 
		'\x2', '\x25A', 'k', '\x3', '\x2', '\x2', '\x2', '\x25B', '\x25F', '\a', 
		'#', '\x2', '\x2', '\x25C', '\x25F', '\a', '%', '\x2', '\x2', '\x25D', 
		'\x25F', '\a', '$', '\x2', '\x2', '\x25E', '\x25B', '\x3', '\x2', '\x2', 
		'\x2', '\x25E', '\x25C', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x25D', 
		'\x3', '\x2', '\x2', '\x2', '\x25F', 'm', '\x3', '\x2', '\x2', '\x2', 
		'\x260', '\x265', '\x5', 'l', '\x37', '\x2', '\x261', '\x265', '\a', '*', 
		'\x2', '\x2', '\x262', '\x265', '\a', '+', '\x2', '\x2', '\x263', '\x265', 
		'\x5', 'p', '\x39', '\x2', '\x264', '\x260', '\x3', '\x2', '\x2', '\x2', 
		'\x264', '\x261', '\x3', '\x2', '\x2', '\x2', '\x264', '\x262', '\x3', 
		'\x2', '\x2', '\x2', '\x264', '\x263', '\x3', '\x2', '\x2', '\x2', '\x265', 
		'o', '\x3', '\x2', '\x2', '\x2', '\x266', '\x267', '\b', '\x39', '\x1', 
		'\x2', '\x267', '\x26E', '\a', '&', '\x2', '\x2', '\x268', '\x26E', '\x5', 
		'r', ':', '\x2', '\x269', '\x26A', '\a', '\f', '\x2', '\x2', '\x26A', 
		'\x26B', '\x5', '\x64', '\x33', '\x2', '\x26B', '\x26C', '\a', '\r', '\x2', 
		'\x2', '\x26C', '\x26E', '\x3', '\x2', '\x2', '\x2', '\x26D', '\x266', 
		'\x3', '\x2', '\x2', '\x2', '\x26D', '\x268', '\x3', '\x2', '\x2', '\x2', 
		'\x26D', '\x269', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x276', '\x3', 
		'\x2', '\x2', '\x2', '\x26F', '\x270', '\f', '\x3', '\x2', '\x2', '\x270', 
		'\x271', '\a', '\xE', '\x2', '\x2', '\x271', '\x272', '\x5', '\x64', '\x33', 
		'\x2', '\x272', '\x273', '\a', '\xF', '\x2', '\x2', '\x273', '\x275', 
		'\x3', '\x2', '\x2', '\x2', '\x274', '\x26F', '\x3', '\x2', '\x2', '\x2', 
		'\x275', '\x278', '\x3', '\x2', '\x2', '\x2', '\x276', '\x274', '\x3', 
		'\x2', '\x2', '\x2', '\x276', '\x277', '\x3', '\x2', '\x2', '\x2', '\x277', 
		'q', '\x3', '\x2', '\x2', '\x2', '\x278', '\x276', '\x3', '\x2', '\x2', 
		'\x2', '\x279', '\x27A', '\a', '\x19', '\x2', '\x2', '\x27A', '\x27B', 
		'\a', '\b', '\x2', '\x2', '\x27B', '\x280', '\a', '&', '\x2', '\x2', '\x27C', 
		'\x27D', '\a', '\b', '\x2', '\x2', '\x27D', '\x27F', '\a', '&', '\x2', 
		'\x2', '\x27E', '\x27C', '\x3', '\x2', '\x2', '\x2', '\x27F', '\x282', 
		'\x3', '\x2', '\x2', '\x2', '\x280', '\x27E', '\x3', '\x2', '\x2', '\x2', 
		'\x280', '\x281', '\x3', '\x2', '\x2', '\x2', '\x281', '\x2AE', '\x3', 
		'\x2', '\x2', '\x2', '\x282', '\x280', '\x3', '\x2', '\x2', '\x2', '\x283', 
		'\x284', '\a', '\x1F', '\x2', '\x2', '\x284', '\x285', '\a', '\b', '\x2', 
		'\x2', '\x285', '\x28A', '\a', '&', '\x2', '\x2', '\x286', '\x287', '\a', 
		'\b', '\x2', '\x2', '\x287', '\x289', '\a', '&', '\x2', '\x2', '\x288', 
		'\x286', '\x3', '\x2', '\x2', '\x2', '\x289', '\x28C', '\x3', '\x2', '\x2', 
		'\x2', '\x28A', '\x288', '\x3', '\x2', '\x2', '\x2', '\x28A', '\x28B', 
		'\x3', '\x2', '\x2', '\x2', '\x28B', '\x2AE', '\x3', '\x2', '\x2', '\x2', 
		'\x28C', '\x28A', '\x3', '\x2', '\x2', '\x2', '\x28D', '\x28E', '\a', 
		'\x1C', '\x2', '\x2', '\x28E', '\x28F', '\a', '\b', '\x2', '\x2', '\x28F', 
		'\x290', '\a', '\x19', '\x2', '\x2', '\x290', '\x291', '\a', '\b', '\x2', 
		'\x2', '\x291', '\x296', '\a', '&', '\x2', '\x2', '\x292', '\x293', '\a', 
		'\b', '\x2', '\x2', '\x293', '\x295', '\a', '&', '\x2', '\x2', '\x294', 
		'\x292', '\x3', '\x2', '\x2', '\x2', '\x295', '\x298', '\x3', '\x2', '\x2', 
		'\x2', '\x296', '\x294', '\x3', '\x2', '\x2', '\x2', '\x296', '\x297', 
		'\x3', '\x2', '\x2', '\x2', '\x297', '\x2AE', '\x3', '\x2', '\x2', '\x2', 
		'\x298', '\x296', '\x3', '\x2', '\x2', '\x2', '\x299', '\x29A', '\a', 
		'\x18', '\x2', '\x2', '\x29A', '\x29B', '\a', '\b', '\x2', '\x2', '\x29B', 
		'\x2A0', '\a', '&', '\x2', '\x2', '\x29C', '\x29D', '\a', '\b', '\x2', 
		'\x2', '\x29D', '\x29F', '\a', '&', '\x2', '\x2', '\x29E', '\x29C', '\x3', 
		'\x2', '\x2', '\x2', '\x29F', '\x2A2', '\x3', '\x2', '\x2', '\x2', '\x2A0', 
		'\x29E', '\x3', '\x2', '\x2', '\x2', '\x2A0', '\x2A1', '\x3', '\x2', '\x2', 
		'\x2', '\x2A1', '\x2AE', '\x3', '\x2', '\x2', '\x2', '\x2A2', '\x2A0', 
		'\x3', '\x2', '\x2', '\x2', '\x2A3', '\x2A4', '\a', '\x16', '\x2', '\x2', 
		'\x2A4', '\x2A5', '\a', '\b', '\x2', '\x2', '\x2A5', '\x2AA', '\a', '&', 
		'\x2', '\x2', '\x2A6', '\x2A7', '\a', '\b', '\x2', '\x2', '\x2A7', '\x2A9', 
		'\a', '&', '\x2', '\x2', '\x2A8', '\x2A6', '\x3', '\x2', '\x2', '\x2', 
		'\x2A9', '\x2AC', '\x3', '\x2', '\x2', '\x2', '\x2AA', '\x2A8', '\x3', 
		'\x2', '\x2', '\x2', '\x2AA', '\x2AB', '\x3', '\x2', '\x2', '\x2', '\x2AB', 
		'\x2AE', '\x3', '\x2', '\x2', '\x2', '\x2AC', '\x2AA', '\x3', '\x2', '\x2', 
		'\x2', '\x2AD', '\x279', '\x3', '\x2', '\x2', '\x2', '\x2AD', '\x283', 
		'\x3', '\x2', '\x2', '\x2', '\x2AD', '\x28D', '\x3', '\x2', '\x2', '\x2', 
		'\x2AD', '\x299', '\x3', '\x2', '\x2', '\x2', '\x2AD', '\x2A3', '\x3', 
		'\x2', '\x2', '\x2', '\x2AE', 's', '\x3', '\x2', '\x2', '\x2', '\x2AF', 
		'\x2B0', '\x5', '\x64', '\x33', '\x2', '\x2B0', '\x2B1', '\a', '\x13', 
		'\x2', '\x2', '\x2B1', '\x2B2', '\x5', '\x64', '\x33', '\x2', '\x2B2', 
		'\x2B5', '\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2B5', '\x5', '\x64', 
		'\x33', '\x2', '\x2B4', '\x2AF', '\x3', '\x2', '\x2', '\x2', '\x2B4', 
		'\x2B3', '\x3', '\x2', '\x2', '\x2', '\x2B5', 'u', '\x3', '\x2', '\x2', 
		'\x2', '\x2B6', '\x2BB', '\x5', 'x', '=', '\x2', '\x2B7', '\x2B8', '\a', 
		'\a', '\x2', '\x2', '\x2B8', '\x2BA', '\x5', 'x', '=', '\x2', '\x2B9', 
		'\x2B7', '\x3', '\x2', '\x2', '\x2', '\x2BA', '\x2BD', '\x3', '\x2', '\x2', 
		'\x2', '\x2BB', '\x2B9', '\x3', '\x2', '\x2', '\x2', '\x2BB', '\x2BC', 
		'\x3', '\x2', '\x2', '\x2', '\x2BC', 'w', '\x3', '\x2', '\x2', '\x2', 
		'\x2BD', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2C1', '\x5', 
		'z', '>', '\x2', '\x2BF', '\x2C0', '\a', '\t', '\x2', '\x2', '\x2C0', 
		'\x2C2', '\x5', '\x64', '\x33', '\x2', '\x2C1', '\x2BF', '\x3', '\x2', 
		'\x2', '\x2', '\x2C1', '\x2C2', '\x3', '\x2', '\x2', '\x2', '\x2C2', 'y', 
		'\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2C8', '\a', '&', '\x2', '\x2', 
		'\x2C4', '\x2C5', '\a', '\xE', '\x2', '\x2', '\x2C5', '\x2C6', '\x5', 
		'\x64', '\x33', '\x2', '\x2C6', '\x2C7', '\a', '\xF', '\x2', '\x2', '\x2C7', 
		'\x2C9', '\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2C4', '\x3', '\x2', '\x2', 
		'\x2', '\x2C8', '\x2C9', '\x3', '\x2', '\x2', '\x2', '\x2C9', '{', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x7F', '\x92', '\x96', '\xC6', '\xC8', '\xD1', 
		'\xDA', '\xE3', '\xEC', '\xF7', '\x102', '\x109', '\x111', '\x11B', '\x127', 
		'\x129', '\x12D', '\x12F', '\x134', '\x13B', '\x16D', '\x18B', '\x1A8', 
		'\x1D1', '\x1D9', '\x1E1', '\x1E5', '\x1EA', '\x1F1', '\x1F5', '\x1FA', 
		'\x20C', '\x213', '\x21D', '\x227', '\x233', '\x242', '\x24D', '\x259', 
		'\x25E', '\x264', '\x26D', '\x276', '\x280', '\x28A', '\x296', '\x2A0', 
		'\x2AA', '\x2AD', '\x2B4', '\x2BB', '\x2C1', '\x2C8',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
